{"file_contents":{"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Zap, TrendingUp, Trophy, Star } from \"lucide-react\";\nimport minerImage1 from \"@assets/generated_images/Gold_accent_mining_rig_f7e3dcd1.png\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background via-background to-accent/10\">\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/10\" />\n        <div className=\"absolute top-20 left-1/4 w-64 h-64 bg-primary/10 rounded-full blur-3xl animate-float\" />\n        <div className=\"absolute bottom-20 right-1/4 w-96 h-96 bg-primary/5 rounded-full blur-3xl animate-float\" style={{ animationDelay: '1s' }} />\n        \n        <div className=\"relative container mx-auto px-4 py-12 sm:py-20\">\n          <div className=\"text-center max-w-3xl mx-auto\">\n            <h1 className=\"font-display font-bold text-5xl sm:text-7xl mb-6\">\n              <span className=\"bg-gold-gradient bg-clip-text text-transparent\">\n                MereMiners\n              </span>\n            </h1>\n            <p className=\"text-xl sm:text-2xl text-muted-foreground mb-4\">\n              Premium Crypto Mining Game\n            </p>\n            <p className=\"text-base sm:text-lg text-foreground/80 mb-8 px-4\">\n              Buy toy-like miners with MERE tokens, place them in your mining room, and watch your earnings grow in real-time\n            </p>\n            \n            <div className=\"flex flex-col gap-4 justify-center items-center mb-12\">\n              <div className=\"flex flex-col sm:flex-row gap-4 w-full sm:w-auto\">\n                <Button\n                  size=\"lg\"\n                  className=\"w-full sm:w-auto text-lg px-8 py-6 bg-gold-gradient hover:opacity-90 text-black font-bold\"\n                  onClick={() => window.location.href = \"/signup\"}\n                  data-testid=\"button-signup\"\n                >\n                  Sign Up\n                </Button>\n                <Button\n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"w-full sm:w-auto text-lg px-8 py-6\"\n                  onClick={() => window.location.href = \"/signin\"}\n                  data-testid=\"button-signin\"\n                >\n                  Sign In\n                </Button>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                1 MERE = $0.50 USD\n              </div>\n            </div>\n\n            <div className=\"relative w-full max-w-md mx-auto mb-12\">\n              <div className=\"absolute inset-0 bg-primary/20 rounded-full blur-3xl\" />\n              <img\n                src={minerImage1}\n                alt=\"Premium Mining Rig\"\n                className=\"relative w-full h-auto animate-float\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <h2 className=\"text-3xl sm:text-4xl font-display font-bold text-center mb-12\">\n          How It <span className=\"bg-gold-gradient bg-clip-text text-transparent\">Works</span>\n        </h2>\n        \n        <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto\">\n          <Card className=\"p-6 border-card-border bg-card hover-elevate\">\n            <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n              <Zap className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"font-display font-bold text-lg mb-2\">Deposit USDT</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Convert USDT (TRC-20) to MERE tokens at a fixed rate of $0.50 per MERE\n            </p>\n          </Card>\n\n          <Card className=\"p-6 border-card-border bg-card hover-elevate\">\n            <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n              <ShoppingBag className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"font-display font-bold text-lg mb-2\">Buy Miners</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Purchase premium toy-like miners with MERE. Get bulk discounts on larger orders\n            </p>\n          </Card>\n\n          <Card className=\"p-6 border-card-border bg-card hover-elevate\">\n            <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n              <TrendingUp className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"font-display font-bold text-lg mb-2\">Mine MERE</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Place miners in your mining room and earn MERE every minute. 1 TH/s = 0.16 MERE/day\n            </p>\n          </Card>\n\n          <Card className=\"p-6 border-card-border bg-card hover-elevate\">\n            <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n              <Trophy className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h3 className=\"font-display font-bold text-lg mb-2\">Compete & Earn</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Climb seasonal leaderboards and unlock exclusive rewards through the Season Pass\n            </p>\n          </Card>\n        </div>\n      </div>\n\n      {/* Stats Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <Card className=\"p-8 sm:p-12 border-card-border bg-gradient-to-br from-card to-accent/20 max-w-4xl mx-auto\">\n          <div className=\"grid sm:grid-cols-3 gap-8 text-center\">\n            <div>\n              <div className=\"text-4xl sm:text-5xl font-display font-bold bg-gold-gradient bg-clip-text text-transparent mb-2\">\n                ~175\n              </div>\n              <div className=\"text-sm text-muted-foreground uppercase tracking-wide\">\n                Days to ROI\n              </div>\n            </div>\n            <div>\n              <div className=\"text-4xl sm:text-5xl font-display font-bold bg-gold-gradient bg-clip-text text-transparent mb-2\">\n                0.16\n              </div>\n              <div className=\"text-sm text-muted-foreground uppercase tracking-wide\">\n                MERE per TH/s Daily\n              </div>\n            </div>\n            <div>\n              <div className=\"text-4xl sm:text-5xl font-display font-bold bg-gold-gradient bg-clip-text text-transparent mb-2\">\n                20%\n              </div>\n              <div className=\"text-sm text-muted-foreground uppercase tracking-wide\">\n                Max Bulk Discount\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"container mx-auto px-4 py-16 pb-24\">\n        <div className=\"text-center max-w-2xl mx-auto\">\n          <h2 className=\"text-3xl sm:text-4xl font-display font-bold mb-6\">\n            Ready to Start <span className=\"bg-gold-gradient bg-clip-text text-transparent\">Mining</span>?\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Join thousands of miners earning MERE tokens every day\n          </p>\n          <Button\n            size=\"lg\"\n            className=\"text-lg px-8 py-6 bg-gold-gradient hover:opacity-90 text-black font-bold\"\n            onClick={() => window.location.href = \"/signup\"}\n            data-testid=\"button-login-cta\"\n          >\n            Get Started Now\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ShoppingBag({ className }: { className?: string }) {\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z\" />\n      <line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\" />\n      <path d=\"M16 10a4 4 0 0 1-8 0\" />\n    </svg>\n  );\n}\n","size_bytes":8095},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/pages/Shop.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MinerCard } from \"@/components/MinerCard\";\nimport { BottomNav } from \"@/components/BottomNav\";\nimport { ShoppingBag, Wallet, Sparkles } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { formatMERE, formatUSD, mereToUSD, TH_BASE_PRICE_MERE } from \"@/lib/constants\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { MinerType, UserMiner } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\n\nexport default function Shop() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedMiner, setSelectedMiner] = useState<MinerType | null>(null);\n  \n  // Fetch user's owned miners to check what they already have\n  const { data: ownedMiners = [] } = useQuery<(UserMiner & { minerType: MinerType })[]>({\n    queryKey: [\"/api/mining/room\"],\n  });\n\n  // Fetch available miners\n  const { data: miners = [], isLoading } = useQuery<MinerType[]>({\n    queryKey: [\"/api/shop/miners\"],\n  });\n\n  // Purchase miner mutation\n  const purchaseMutation = useMutation({\n    mutationFn: async ({ minerTypeId }: { minerTypeId: string }) => {\n      await apiRequest(\"POST\", \"/api/shop/buy\", { minerTypeId, quantity: 1 });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/mining/room\"] });\n      setSelectedMiner(null);\n      toast({\n        title: \"Purchase Successful!\",\n        description: \"Miner added to your inventory\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePurchase = (miner: MinerType) => {\n    setSelectedMiner(miner);\n  };\n\n  const confirmPurchase = () => {\n    if (!selectedMiner) return;\n    \n    purchaseMutation.mutate({\n      minerTypeId: selectedMiner.id,\n    });\n  };\n  \n  // Check if user already owns this miner type\n  const ownsSelectedMiner = selectedMiner ? ownedMiners.some(m => m.minerType.id === selectedMiner.id) : false;\n\n  const getTotalCost = () => {\n    if (!selectedMiner) return { originalPrice: 0, finalPrice: 0, discountPercent: 0 };\n    \n    // Calculate rarity-based discount\n    let discountPercent = 0;\n    if (selectedMiner.rarity === \"rare\") discountPercent = 4;\n    else if (selectedMiner.rarity === \"epic\") discountPercent = 5;\n    else if (selectedMiner.rarity === \"legendary\") discountPercent = 7;\n    \n    const originalPrice = parseFloat(selectedMiner.basePriceMere);\n    const finalPrice = originalPrice * (1 - discountPercent / 100);\n    \n    return {\n      originalPrice,\n      finalPrice,\n      discountPercent,\n    };\n  };\n\n  const cost = getTotalCost();\n  const canAfford = user && parseFloat(user.mereBalance) >= cost.finalPrice;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center pb-20\">\n        <div className=\"animate-pulse text-primary\">Loading shop...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background via-background to-accent/5 pb-20\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-40 bg-card/95 backdrop-blur-sm border-b border-border\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"font-display font-bold text-2xl bg-gold-gradient bg-clip-text text-transparent flex items-center gap-2\">\n              <ShoppingBag className=\"w-6 h-6 text-primary\" />\n              Miner Shop\n            </h1>\n            <div className=\"flex items-center gap-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => window.location.href = \"/wallet\"}\n                className=\"gap-2\"\n                data-testid=\"button-wallet\"\n              >\n                <Wallet className=\"w-4 h-4\" />\n                <span className=\"font-bold text-primary\">{formatMERE(user?.mereBalance || 0)}</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Shop Grid */}\n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {miners.map((miner) => (\n            <MinerCard\n              key={miner.id}\n              miner={miner}\n              onPurchase={handlePurchase}\n              isPurchasing={purchaseMutation.isPending && selectedMiner?.id === miner.id}\n            />\n          ))}\n        </div>\n\n        {miners.length === 0 && (\n          <Card className=\"p-12 text-center border-card-border\">\n            <p className=\"text-muted-foreground\">No miners available at the moment</p>\n          </Card>\n        )}\n      </div>\n\n      {/* Purchase Confirmation Dialog */}\n      <Dialog open={!!selectedMiner} onOpenChange={() => setSelectedMiner(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Purchase {selectedMiner?.name}</DialogTitle>\n            <DialogDescription>\n              Configure your purchase\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4 py-4\">\n            {ownsSelectedMiner && (\n              <Card className=\"p-4 bg-destructive/10 border-destructive/30\">\n                <div className=\"text-sm text-destructive text-center font-semibold\">\n                  You already own this miner type. Each miner can only be purchased once.\n                </div>\n              </Card>\n            )}\n\n            {selectedMiner && (\n              <div className=\"space-y-3\">\n                <Card className=\"p-4 bg-accent/20\">\n                  <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                    <div className=\"text-muted-foreground\">Hash Rate:</div>\n                    <div className=\"font-semibold text-right\">{selectedMiner.thRate.toFixed(2)} TH/s</div>\n                    \n                    <div className=\"text-muted-foreground\">Daily Yield:</div>\n                    <div className=\"font-semibold text-right text-primary\">\n                      {formatMERE(parseFloat(selectedMiner.dailyYieldMere))}\n                    </div>\n                    \n                    <div className=\"text-muted-foreground\">Rarity:</div>\n                    <div className=\"font-semibold text-right capitalize\">{selectedMiner.rarity}</div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-4 bg-card border-primary/50\">\n                  <div className=\"space-y-2\">\n                    {cost.discountPercent > 0 && (\n                      <div className=\"flex items-center justify-between pb-2 border-b border-border\">\n                        <span className=\"text-sm text-muted-foreground\">Original Price:</span>\n                        <span className=\"text-sm line-through text-muted-foreground\">{formatMERE(cost.originalPrice)}</span>\n                      </div>\n                    )}\n                    {cost.discountPercent > 0 && (\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-semibold\">Discount:</span>\n                        <span className=\"text-sm font-semibold text-primary\">-{cost.discountPercent}%</span>\n                      </div>\n                    )}\n                    <div className=\"flex items-center justify-between pt-2 border-t border-border\">\n                      <span className=\"font-semibold\">Final Price:</span>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-display font-bold bg-gold-gradient bg-clip-text text-transparent\">\n                          {formatMERE(cost.finalPrice.toFixed(2))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n\n                {!canAfford && (\n                  <div className=\"text-sm text-destructive text-center\">\n                    Insufficient MERE balance. Deposit more to continue.\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setSelectedMiner(null)} data-testid=\"button-cancel-purchase\">\n              Cancel\n            </Button>\n            <Button\n              onClick={confirmPurchase}\n              disabled={!canAfford || purchaseMutation.isPending || ownsSelectedMiner}\n              className=\"bg-gold-gradient text-black font-bold\"\n              data-testid=\"button-confirm-purchase\"\n            >\n              {purchaseMutation.isPending ? \"Processing...\" : ownsSelectedMiner ? \"Already Owned\" : \"Confirm Purchase\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n\n      <BottomNav />\n    </div>\n  );\n}\n","size_bytes":9258},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/db.ts":{"content":"// Database connection for MereMiners - from javascript_database blueprint\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":558},"server/storage.ts":{"content":"// Database storage implementation for MereMiners\nimport {\n  users,\n  minerTypes,\n  userMiners,\n  transactions,\n  seasons,\n  leaderboardEntries,\n  seasonPassRewards,\n  userSeasonPass,\n  dailyGames,\n  type User,\n  type UpsertUser,\n  type MinerType,\n  type InsertMinerType,\n  type UserMiner,\n  type InsertUserMiner,\n  type Transaction,\n  type InsertTransaction,\n  type Season,\n  type InsertSeason,\n  type LeaderboardEntry,\n  type InsertLeaderboardEntry,\n  type SeasonPassReward,\n  type UserSeasonPass,\n  type DailyGame,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\nimport { nanoid } from \"nanoid\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByReferralCode(referralCode: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserBalance(userId: string, amountMere: string, operation: \"add\" | \"subtract\"): Promise<void>;\n  incrementReferralCount(userId: string): Promise<void>;\n  \n  // Miner Type operations\n  getMinerTypes(): Promise<MinerType[]>;\n  getMinerType(id: string): Promise<MinerType | undefined>;\n  createMinerType(minerType: InsertMinerType): Promise<MinerType>;\n  \n  // User Miner operations\n  getUserMiners(userId: string): Promise<(UserMiner & { minerType: MinerType })[]>;\n  getUserMiner(id: string): Promise<(UserMiner & { minerType: MinerType }) | undefined>;\n  createUserMiner(userMiner: InsertUserMiner): Promise<UserMiner>;\n  updateMinerSlot(minerId: string, slotPosition: number | null): Promise<void>;\n  upgradeMiner(minerId: string, userId: string): Promise<{ newLevel: number; cost: number }>;\n  \n  // Transaction operations\n  getUserTransactions(userId: string): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  \n  // Leaderboard operations\n  getCurrentSeason(): Promise<Season | undefined>;\n  getLeaderboard(seasonId: string, limit?: number): Promise<(LeaderboardEntry & { user: User })[]>;\n  upsertLeaderboardEntry(entry: InsertLeaderboardEntry): Promise<void>;\n  \n  // Season Pass operations\n  getUserSeasonPass(userId: string, seasonId: string): Promise<UserSeasonPass | undefined>;\n  createUserSeasonPass(userId: string, seasonId: string): Promise<UserSeasonPass>;\n  updateSeasonPassTier(userId: string, seasonId: string, tier: number): Promise<void>;\n  upgradeSeasonPass(userId: string, seasonId: string): Promise<void>;\n  claimSeasonPassReward(userId: string, seasonId: string, rewardId: string): Promise<void>;\n  getSeasonPassRewards(seasonId: string): Promise<SeasonPassReward[]>;\n  \n  // Unlocking slots\n  unlockSlot(userId: string): Promise<{ newSlotCount: number }>;\n  getUserSlotCount(userId: string): Promise<number>;\n  \n  // Daily Games operations\n  getLastDailyGame(userId: string, gameType: string): Promise<DailyGame | undefined>;\n  hasPlayedGameBefore(userId: string, gameType: string): Promise<boolean>;\n  playDailyGame(userId: string, gameType: string, rewardMere: string, metadata?: any): Promise<DailyGame>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByReferralCode(referralCode: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.referralCode, referralCode));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    // Generate referral code if not provided\n    const referralCode = userData.referralCode || `MERE${nanoid(6).toUpperCase()}`;\n    \n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        referralCode,\n      })\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          email: userData.email,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          profileImageUrl: userData.profileImageUrl,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserBalance(userId: string, amountMere: string, operation: \"add\" | \"subtract\"): Promise<void> {\n    const amount = parseFloat(amountMere);\n    if (operation === \"add\") {\n      await db\n        .update(users)\n        .set({\n          mereBalance: sql`${users.mereBalance} + ${amount}`,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId));\n    } else {\n      await db\n        .update(users)\n        .set({\n          mereBalance: sql`${users.mereBalance} - ${amount}`,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId));\n    }\n  }\n\n  async incrementReferralCount(userId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        totalReferrals: sql`${users.totalReferrals} + 1`,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Miner Type operations\n  async getMinerTypes(): Promise<MinerType[]> {\n    return await db.select().from(minerTypes).where(eq(minerTypes.isAvailable, true));\n  }\n\n  async getMinerType(id: string): Promise<MinerType | undefined> {\n    const [minerType] = await db.select().from(minerTypes).where(eq(minerTypes.id, id));\n    return minerType;\n  }\n\n  async createMinerType(minerType: InsertMinerType): Promise<MinerType> {\n    const [created] = await db.insert(minerTypes).values(minerType).returning();\n    return created;\n  }\n\n  // User Miner operations\n  async getUserMiners(userId: string): Promise<(UserMiner & { minerType: MinerType })[]> {\n    const result = await db\n      .select()\n      .from(userMiners)\n      .innerJoin(minerTypes, eq(userMiners.minerTypeId, minerTypes.id))\n      .where(eq(userMiners.userId, userId))\n      .orderBy(desc(userMiners.purchasedAt));\n    \n    return result.map(row => ({\n      ...row.user_miners,\n      minerType: row.miner_types,\n    }));\n  }\n\n  async getUserMiner(id: string): Promise<(UserMiner & { minerType: MinerType }) | undefined> {\n    const result = await db\n      .select()\n      .from(userMiners)\n      .innerJoin(minerTypes, eq(userMiners.minerTypeId, minerTypes.id))\n      .where(eq(userMiners.id, id))\n      .limit(1);\n    \n    if (result.length === 0) return undefined;\n    \n    return {\n      ...result[0].user_miners,\n      minerType: result[0].miner_types,\n    };\n  }\n\n  async createUserMiner(userMiner: InsertUserMiner): Promise<UserMiner> {\n    const [created] = await db.insert(userMiners).values(userMiner).returning();\n    return created;\n  }\n\n  async updateMinerSlot(minerId: string, slotPosition: number | null): Promise<void> {\n    await db\n      .update(userMiners)\n      .set({ slotPosition })\n      .where(eq(userMiners.id, minerId));\n  }\n\n  async upgradeMiner(minerId: string, userId: string): Promise<{ newLevel: number; cost: number }> {\n    // Get the miner with its type\n    const result = await db\n      .select()\n      .from(userMiners)\n      .innerJoin(minerTypes, eq(userMiners.minerTypeId, minerTypes.id))\n      .where(and(eq(userMiners.id, minerId), eq(userMiners.userId, userId)))\n      .limit(1);\n\n    if (result.length === 0) {\n      throw new Error(\"Miner not found\");\n    }\n\n    const miner = result[0].user_miners;\n    const minerType = result[0].miner_types;\n\n    const currentLevel = miner.upgradeLevel;\n\n    // Flat upgrade cost: $12.99 USD = 25.98 MERE for all miners\n    const upgradeCost = 25.98;\n\n    // Check if user has enough balance\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n\n    const balance = parseFloat(user.mereBalance);\n    if (balance < upgradeCost) {\n      throw new Error(`Insufficient balance. Need ${upgradeCost.toFixed(2)} MERE`);\n    }\n\n    // Deduct cost from user balance\n    await this.updateUserBalance(userId, upgradeCost.toFixed(2), \"subtract\");\n\n    // Upgrade the miner\n    const newLevel = currentLevel + 1;\n    await db\n      .update(userMiners)\n      .set({ upgradeLevel: newLevel })\n      .where(eq(userMiners.id, minerId));\n\n    // Create transaction record\n    await this.createTransaction({\n      userId,\n      type: \"purchase\",\n      amountMere: upgradeCost.toFixed(2),\n      amountUsd: (upgradeCost * 0.5).toFixed(2),\n      description: `Upgraded ${minerType.name} to level ${newLevel}`,\n      status: \"completed\",\n      metadata: { minerId, oldLevel: currentLevel, newLevel },\n    });\n\n    return { newLevel, cost: upgradeCost };\n  }\n\n  // Transaction operations\n  async getUserTransactions(userId: string): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt))\n      .limit(50);\n  }\n\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const [created] = await db.insert(transactions).values(transaction).returning();\n    return created;\n  }\n\n  // Leaderboard operations\n  async getCurrentSeason(): Promise<Season | undefined> {\n    const [season] = await db\n      .select()\n      .from(seasons)\n      .where(eq(seasons.isActive, true))\n      .orderBy(desc(seasons.startAt))\n      .limit(1);\n    return season;\n  }\n\n  async getLeaderboard(seasonId: string, limit: number = 100): Promise<(LeaderboardEntry & { user: User })[]> {\n    const result = await db\n      .select()\n      .from(leaderboardEntries)\n      .innerJoin(users, eq(leaderboardEntries.userId, users.id))\n      .where(eq(leaderboardEntries.seasonId, seasonId))\n      .orderBy(desc(leaderboardEntries.totalMined))\n      .limit(limit);\n    \n    return result.map((row, index) => ({\n      ...row.leaderboard_entries,\n      rank: index + 1,\n      user: row.users,\n    }));\n  }\n\n  async upsertLeaderboardEntry(entry: InsertLeaderboardEntry): Promise<void> {\n    await db\n      .insert(leaderboardEntries)\n      .values(entry)\n      .onConflictDoUpdate({\n        target: [leaderboardEntries.userId, leaderboardEntries.seasonId],\n        set: {\n          totalMined: entry.totalMined,\n          totalHashrate: entry.totalHashrate,\n          updatedAt: new Date(),\n        },\n      });\n  }\n\n  // Season Pass operations\n  async getUserSeasonPass(userId: string, seasonId: string): Promise<UserSeasonPass | undefined> {\n    const [pass] = await db\n      .select()\n      .from(userSeasonPass)\n      .where(\n        and(\n          eq(userSeasonPass.userId, userId),\n          eq(userSeasonPass.seasonId, seasonId)\n        )\n      );\n    return pass;\n  }\n\n  async createUserSeasonPass(userId: string, seasonId: string): Promise<UserSeasonPass> {\n    const [pass] = await db\n      .insert(userSeasonPass)\n      .values({\n        userId,\n        seasonId,\n        currentTier: 0,\n        hasPremium: false,\n        claimedRewards: [],\n      })\n      .returning();\n    return pass;\n  }\n\n  async updateSeasonPassTier(userId: string, seasonId: string, tier: number): Promise<void> {\n    await db\n      .update(userSeasonPass)\n      .set({\n        currentTier: tier,\n        updatedAt: new Date(),\n      })\n      .where(\n        and(\n          eq(userSeasonPass.userId, userId),\n          eq(userSeasonPass.seasonId, seasonId)\n        )\n      );\n  }\n\n  async upgradeSeasonPass(userId: string, seasonId: string): Promise<void> {\n    await db\n      .update(userSeasonPass)\n      .set({\n        hasPremium: true,\n        updatedAt: new Date(),\n      })\n      .where(\n        and(\n          eq(userSeasonPass.userId, userId),\n          eq(userSeasonPass.seasonId, seasonId)\n        )\n      );\n  }\n\n  async claimSeasonPassReward(userId: string, seasonId: string, rewardId: string): Promise<void> {\n    const [pass] = await db\n      .select()\n      .from(userSeasonPass)\n      .where(\n        and(\n          eq(userSeasonPass.userId, userId),\n          eq(userSeasonPass.seasonId, seasonId)\n        )\n      );\n    \n    if (!pass) throw new Error(\"Season pass not found\");\n    \n    // Ensure claimedRewards is always an array (Drizzle converts jsonb to JS array)\n    const claimed = Array.isArray(pass.claimedRewards) \n      ? (pass.claimedRewards as string[]) \n      : [];\n    \n    if (!claimed.includes(rewardId)) {\n      claimed.push(rewardId);\n      await db\n        .update(userSeasonPass)\n        .set({\n          claimedRewards: claimed,\n          updatedAt: new Date(),\n        })\n        .where(\n          and(\n            eq(userSeasonPass.userId, userId),\n            eq(userSeasonPass.seasonId, seasonId)\n          )\n        );\n    }\n  }\n\n  async getSeasonPassRewards(seasonId: string): Promise<SeasonPassReward[]> {\n    return await db\n      .select()\n      .from(seasonPassRewards)\n      .where(eq(seasonPassRewards.seasonId, seasonId))\n      .orderBy(seasonPassRewards.tier);\n  }\n\n  // Slot operations\n  async unlockSlot(userId: string): Promise<{ newSlotCount: number }> {\n    // This is simplified - in production you'd track this per user\n    // For now, we'll just return success\n    return { newSlotCount: 10 };\n  }\n\n  async getUserSlotCount(userId: string): Promise<number> {\n    // Default slot count - could be extended to track per user\n    return 6;\n  }\n\n  // Daily Games operations\n  async getLastDailyGame(userId: string, gameType: string): Promise<DailyGame | undefined> {\n    const [game] = await db\n      .select()\n      .from(dailyGames)\n      .where(\n        and(\n          eq(dailyGames.userId, userId),\n          eq(dailyGames.gameType, gameType)\n        )\n      )\n      .orderBy(desc(dailyGames.lastPlayedAt))\n      .limit(1);\n    return game;\n  }\n\n  async hasPlayedGameBefore(userId: string, gameType: string): Promise<boolean> {\n    const games = await db\n      .select({ id: dailyGames.id })\n      .from(dailyGames)\n      .where(\n        and(\n          eq(dailyGames.userId, userId),\n          eq(dailyGames.gameType, gameType)\n        )\n      )\n      .limit(1);\n    return games.length > 0;\n  }\n\n  async playDailyGame(userId: string, gameType: string, rewardMere: string, metadata?: any): Promise<DailyGame> {\n    // Credit the user with reward MERE\n    await this.updateUserBalance(userId, rewardMere, \"add\");\n    \n    // Record the game play\n    const [game] = await db\n      .insert(dailyGames)\n      .values({\n        userId,\n        gameType,\n        lastPlayedAt: new Date(),\n        rewardMere,\n        metadata: metadata || null,\n      })\n      .returning();\n    \n    return game;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14556},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/constants.ts":{"content":"// MereMiners Game Constants - Re-export from shared for backward compatibility\nexport * from \"@shared/constants\";\n","size_bytes":115},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/MiningSlot.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Zap, TrendingUp, X, ArrowUp } from \"lucide-react\";\nimport type { UserMiner, MinerType } from \"@shared/schema\";\nimport { formatMERE, mereToUSD, TH_DAILY_YIELD_MERE } from \"@/lib/constants\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface MiningSlotProps {\n  slotNumber: number;\n  miner?: UserMiner & { minerType: MinerType };\n  onAddMiner?: () => void;\n  onRemoveMiner?: (minerId: string) => void;\n  onUpgradeMiner?: (minerId: string) => void;\n  isEmpty?: boolean;\n  isLocked?: boolean;\n  onUnlock?: () => void;\n}\n\nexport function MiningSlot({ \n  slotNumber, \n  miner, \n  onAddMiner, \n  onRemoveMiner,\n  onUpgradeMiner,\n  isEmpty = true,\n  isLocked = false,\n  onUnlock \n}: MiningSlotProps) {\n  const [showRemoveConfirm, setShowRemoveConfirm] = useState(false);\n  if (isLocked) {\n    return (\n      <Card className=\"relative aspect-square border-2 border-dashed border-border bg-accent/20 hover-elevate\">\n        <div className=\"absolute inset-0 flex flex-col items-center justify-center p-3 text-center\">\n          <div className=\"w-10 h-10 rounded-full bg-muted flex items-center justify-center mb-2\">\n            <Plus className=\"w-5 h-5 text-muted-foreground\" />\n          </div>\n          <p className=\"text-xs font-medium text-foreground mb-1\">Slot Locked</p>\n          <p className=\"text-[10px] text-muted-foreground mb-3\">Unlock to place more miners</p>\n          {onUnlock && (\n            <Button \n              size=\"sm\" \n              onClick={onUnlock}\n              data-testid={`button-unlock-slot-${slotNumber}`}\n            >\n              Unlock (50 MERE)\n            </Button>\n          )}\n        </div>\n      </Card>\n    );\n  }\n\n  if (isEmpty || !miner) {\n    return (\n      <Card className=\"relative aspect-square border-2 border-dashed border-primary/30 bg-accent/10 hover-elevate cursor-pointer group\">\n        <div \n          className=\"absolute inset-0 flex flex-col items-center justify-center p-3\"\n          onClick={onAddMiner}\n          data-testid={`slot-empty-${slotNumber}`}\n        >\n          <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mb-2 group-hover:bg-primary/20 transition-colors\">\n            <Plus className=\"w-6 h-6 text-primary animate-pulse-glow\" />\n          </div>\n          <p className=\"text-xs font-medium text-primary\">Add Miner</p>\n          <p className=\"text-[10px] text-muted-foreground mt-1\">Slot {slotNumber}</p>\n        </div>\n      </Card>\n    );\n  }\n\n  // No upgrade multiplier - upgrades don't affect hashrate\n  const dailyYield = miner.minerType.thRate * TH_DAILY_YIELD_MERE * miner.boostMultiplier;\n  const isActive = miner.isActive;\n  const upgradeLevel = miner.upgradeLevel || 0;\n  // Flat upgrade cost: $12.99 USD = 25.98 MERE for all miners (unlimited upgrades)\n  const upgradeCost = 25.98;\n\n  return (\n    <>\n      <Card className=\"relative aspect-square overflow-hidden border-card-border bg-gradient-to-br from-card to-accent/10 hover-elevate group flex flex-col\">\n        {upgradeLevel > 0 && (\n          <div className=\"absolute top-1 left-1 z-10\">\n            <Badge className=\"bg-gold-gradient text-black text-[10px] font-bold\">\n              Lv {upgradeLevel}\n            </Badge>\n          </div>\n        )}\n\n        {miner.boostMultiplier > 1 && (\n          <div className=\"absolute top-1 left-1 z-10\" style={{ marginTop: upgradeLevel > 0 ? '1.25rem' : '0.25rem' }}>\n            <Badge className=\"bg-primary text-primary-foreground text-[10px]\">\n              {miner.boostMultiplier}x\n            </Badge>\n          </div>\n        )}\n\n        {onRemoveMiner && (\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={() => setShowRemoveConfirm(true)}\n            className=\"absolute top-0 right-0 z-20 h-6 w-6 text-destructive hover:text-destructive hover:bg-destructive/10\"\n            data-testid={`button-remove-miner-${miner.id}`}\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        )}\n\n        <div className=\"relative h-[60%] bg-gradient-to-br from-background/50 to-accent/30 p-2 flex items-center justify-center\">\n          <div className=\"w-full h-full flex items-center justify-center\">\n            <img\n              src={miner.minerType.imageUrl}\n              alt={miner.minerType.name}\n              className=\"max-w-[85%] max-h-[85%] object-contain animate-float\"\n              data-testid={`img-placed-miner-${miner.id}`}\n            />\n          </div>\n          \n          {isActive && (\n            <>\n              <div className=\"absolute inset-0 pointer-events-none\">\n                <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-3/4 h-3/4 bg-primary/10 rounded-full blur-2xl animate-pulse-glow\" />\n              </div>\n              {/* Particle effects */}\n              <div className=\"absolute top-1/4 left-1/4 w-1 h-1 bg-primary rounded-full animate-sparkle\" style={{ animationDelay: '0ms' }} />\n              <div className=\"absolute top-1/3 right-1/3 w-1 h-1 bg-primary rounded-full animate-sparkle\" style={{ animationDelay: '500ms' }} />\n              <div className=\"absolute bottom-1/3 left-1/3 w-1 h-1 bg-primary rounded-full animate-sparkle\" style={{ animationDelay: '1000ms' }} />\n            </>\n          )}\n        </div>\n\n        <div className=\"flex-1 p-2 space-y-1\">\n          <h4 className=\"font-semibold text-xs text-foreground truncate\" data-testid={`text-placed-miner-name-${miner.id}`}>\n            {miner.minerType.name}\n          </h4>\n          \n          <div className=\"grid grid-cols-2 gap-1 text-[10px]\">\n            <div className=\"flex items-center gap-0.5\">\n              <Zap className=\"w-2.5 h-2.5 text-primary\" />\n              <span className=\"text-muted-foreground\">\n                {miner.minerType.thRate.toFixed(1)} TH/s\n              </span>\n            </div>\n            <div className=\"flex items-center gap-0.5\">\n              <TrendingUp className=\"w-2.5 h-2.5 text-primary\" />\n              <span className=\"font-semibold text-primary text-[9px]\">{formatMERE(dailyYield)}/d</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-2 pt-0 mt-auto\">\n          {onUpgradeMiner && (\n            <Button\n              onClick={() => onUpgradeMiner(miner.id)}\n              className=\"w-full bg-gold-gradient text-black font-bold text-xs flex items-center justify-center gap-1.5\"\n              data-testid={`button-upgrade-miner-${miner.id}`}\n            >\n              <ArrowUp className=\"w-4 h-4\" />\n              <span>Upgrade ({upgradeCost} MERE)</span>\n            </Button>\n          )}\n        </div>\n      </Card>\n\n    {/* Remove Confirmation Dialog */}\n    {onRemoveMiner && (\n      <AlertDialog open={showRemoveConfirm} onOpenChange={setShowRemoveConfirm}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Remove Miner?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to remove <strong>{miner?.minerType.name}</strong> from this slot? The miner will be moved to your inventory and stop earning MERE.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-remove\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => {\n                onRemoveMiner(miner.id);\n                setShowRemoveConfirm(false);\n              }}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-confirm-remove\"\n            >\n              Remove Miner\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    )}\n  </>\n  );\n}\n","size_bytes":8116},"server/seed.ts":{"content":"// Seed data for MereMiners\nimport { db } from \"./db\";\nimport { minerTypes, seasons, seasonPassRewards, achievements } from \"@shared/schema\";\n\nasync function seed() {\n  console.log(\"Seeding database...\");\n\n  // Check if data already exists\n  const existingMiners = await db.select().from(minerTypes).limit(1);\n  if (existingMiners.length > 0) {\n    console.log(\"Database already seeded!\");\n    return;\n  }\n\n  // Create miner types (1 TH/s base unit)\n  // Using paths that will be accessible through the Vite asset system\n  const minerData = [\n    {\n      name: \"Cube Miner\",\n      description: \"Entry-level compact mining unit with reliable performance\",\n      imageUrl: \"/attached_assets/generated_images/Black_Background_Cube_Miner_c9e82d6a.png\",\n      thRate: 1.0,\n      basePriceUsd: \"13.99\",\n      basePriceMere: \"27.98\",\n      dailyYieldUsd: \"0.08\",\n      dailyYieldMere: \"0.16\",\n      roiDays: 175,\n      rarity: \"common\",\n      isAvailable: true,\n    },\n    {\n      name: \"Tower Miner\",\n      description: \"Elegant vertical design with enhanced cooling\",\n      imageUrl: \"/attached_assets/generated_images/Black_Background_Tower_Miner_71708957.png\",\n      thRate: 2.5,\n      basePriceUsd: \"34.98\",\n      basePriceMere: \"69.96\",\n      dailyYieldUsd: \"0.20\",\n      dailyYieldMere: \"0.40\",\n      roiDays: 175,\n      rarity: \"common\",\n      isAvailable: true,\n    },\n    {\n      name: \"Crystal Miner\",\n      description: \"Crystalline structure with prismatic light refraction\",\n      imageUrl: \"/attached_assets/generated_images/Black_Background_Crystal_Miner_1f35bbb9.png\",\n      thRate: 3.5,\n      basePriceUsd: \"48.98\",\n      basePriceMere: \"97.96\",\n      dailyYieldUsd: \"0.28\",\n      dailyYieldMere: \"0.56\",\n      roiDays: 175,\n      rarity: \"common\",\n      isAvailable: true,\n    },\n    {\n      name: \"Sphere Miner\",\n      description: \"Advanced spherical design with hexagonal pattern\",\n      imageUrl: \"/attached_assets/generated_images/Black_Background_Sphere_Miner_77b3bcb5.png\",\n      thRate: 5.0,\n      basePriceUsd: \"69.95\",\n      basePriceMere: \"139.90\",\n      dailyYieldUsd: \"0.40\",\n      dailyYieldMere: \"0.80\",\n      roiDays: 175,\n      rarity: \"rare\",\n      isAvailable: true,\n    },\n    {\n      name: \"Spiral Reactor\",\n      description: \"Spiral design with advanced cooling system\",\n      imageUrl: \"/attached_assets/generated_images/Black_Background_Spiral_Reactor_a1f600d1.png\",\n      thRate: 7.5,\n      basePriceUsd: \"104.93\",\n      basePriceMere: \"209.86\",\n      dailyYieldUsd: \"0.60\",\n      dailyYieldMere: \"1.20\",\n      roiDays: 175,\n      rarity: \"rare\",\n      isAvailable: true,\n    },\n    {\n      name: \"Quantum Box\",\n      description: \"Minimalist high-performance mining unit\",\n      imageUrl: \"/attached_assets/generated_images/Black_Background_Quantum_Box_c28c5e6a.png\",\n      thRate: 10.0,\n      basePriceUsd: \"139.90\",\n      basePriceMere: \"279.80\",\n      dailyYieldUsd: \"0.80\",\n      dailyYieldMere: \"1.60\",\n      roiDays: 175,\n      rarity: \"epic\",\n      isAvailable: true,\n    },\n    {\n      name: \"Fusion Core\",\n      description: \"Compact fusion reactor with quantum processing\",\n      imageUrl: \"/attached_assets/generated_images/Black_Background_Fusion_Core_75d5c989.png\",\n      thRate: 15.0,\n      basePriceUsd: \"209.85\",\n      basePriceMere: \"419.70\",\n      dailyYieldUsd: \"1.20\",\n      dailyYieldMere: \"2.40\",\n      roiDays: 175,\n      rarity: \"epic\",\n      isAvailable: true,\n    },\n    {\n      name: \"Titan Core\",\n      description: \"Industrial-grade processing with triple redundancy\",\n      imageUrl: \"/attached_assets/generated_images/Black_Background_Titan_Core_835834c5.png\",\n      thRate: 20.0,\n      basePriceUsd: \"279.80\",\n      basePriceMere: \"559.60\",\n      dailyYieldUsd: \"1.60\",\n      dailyYieldMere: \"3.20\",\n      roiDays: 175,\n      rarity: \"epic\",\n      isAvailable: true,\n    },\n    {\n      name: \"Pyramid Elite\",\n      description: \"Elite-tier supercomputer with holographic circuitry\",\n      imageUrl: \"/attached_assets/generated_images/Black_Background_Pyramid_Elite_826f6c77.png\",\n      thRate: 25.0,\n      basePriceUsd: \"349.75\",\n      basePriceMere: \"699.50\",\n      dailyYieldUsd: \"2.00\",\n      dailyYieldMere: \"4.00\",\n      roiDays: 175,\n      rarity: \"legendary\",\n      isAvailable: true,\n    },\n    {\n      name: \"Mega Fortress\",\n      description: \"Ultimate powerhouse with AI-driven optimization\",\n      imageUrl: \"/attached_assets/generated_images/Black_Background_Mega_Fortress_0d82d9de.png\",\n      thRate: 50.0,\n      basePriceUsd: \"699.50\",\n      basePriceMere: \"1399.00\",\n      dailyYieldUsd: \"4.00\",\n      dailyYieldMere: \"8.00\",\n      roiDays: 175,\n      rarity: \"legendary\",\n      isAvailable: true,\n    },\n  ];\n\n  await db.insert(minerTypes).values(minerData);\n  console.log(\"✓ Miner types created\");\n\n  // Create current season\n  const now = new Date();\n  const seasonEnd = new Date(now);\n  seasonEnd.setDate(seasonEnd.getDate() + 30); // 30 days from now\n\n  const [season] = await db.insert(seasons).values({\n    name: \"Genesis Season\",\n    startAt: now,\n    endAt: seasonEnd,\n    isActive: true,\n  }).returning();\n  console.log(\"✓ Season created\");\n\n  // Create premium-only season pass rewards (balanced at 999 MERE cost, 1290 MERE total rewards = 30% profit + 10 TH/s)\n  const rewards = [];\n  const rewardAmounts = [30, 40, 50, 60, 0, 65, 70, 75, 80, 0, 85, 90, 95, 100, 0, 105, 110, 115, 120, 0];\n  const thBoosts = [0, 0, 0, 0, 2, 0, 0, 0, 0, 2.5, 0, 0, 0, 0, 2.5, 0, 0, 0, 0, 3]; // Total: 10 TH/s\n  \n  for (let tier = 0; tier < 20; tier++) {\n    const rewardAmount = rewardAmounts[tier];\n    const thBoost = thBoosts[tier];\n    \n    // Premium rewards - mix of MERE and TH/s boosts\n    rewards.push({\n      seasonId: season.id,\n      tier,\n      isPremium: true,\n      rewardType: thBoost > 0 ? \"booster\" : \"mere\",\n      rewardValue: thBoost > 0 ? thBoost.toString() : rewardAmount.toString(),\n      rewardMetadata: {\n        name: thBoost > 0 ? `+${thBoost} TH/s Boost` : `${rewardAmount} MERE`,\n        description: thBoost > 0 ? \"Permanent hashrate boost to all miners\" : \"Instant MERE reward\",\n      },\n    });\n  }\n\n  await db.insert(seasonPassRewards).values(rewards);\n  console.log(\"✓ Season pass rewards created\");\n\n  // Create achievements\n  const achievementsData = [\n    {\n      name: \"First Steps\",\n      description: \"Make your first miner purchase\",\n      icon: \"ShoppingCart\",\n      category: \"shop\",\n      criteria: { type: \"total_purchases\", value: 1 },\n      rewardMere: \"10.00\",\n      tier: \"bronze\",\n    },\n    {\n      name: \"Collector\",\n      description: \"Own 10 miners\",\n      icon: \"Package\",\n      category: \"shop\",\n      criteria: { type: \"total_miners_owned\", value: 10 },\n      rewardMere: \"50.00\",\n      tier: \"silver\",\n    },\n    {\n      name: \"Mining Beginner\",\n      description: \"Place your first miner in a slot\",\n      icon: \"Zap\",\n      category: \"mining\",\n      criteria: { type: \"miners_placed\", value: 1 },\n      rewardMere: \"5.00\",\n      tier: \"bronze\",\n    },\n    {\n      name: \"Full Capacity\",\n      description: \"Fill all 6 default slots\",\n      icon: \"Grid3x3\",\n      category: \"mining\",\n      criteria: { type: \"slots_filled\", value: 6 },\n      rewardMere: \"25.00\",\n      tier: \"silver\",\n    },\n    {\n      name: \"Hash Power\",\n      description: \"Reach 10 TH/s total hashrate\",\n      icon: \"TrendingUp\",\n      category: \"mining\",\n      criteria: { type: \"total_hashrate\", value: 10 },\n      rewardMere: \"30.00\",\n      tier: \"silver\",\n    },\n    {\n      name: \"Mining Tycoon\",\n      description: \"Reach 50 TH/s total hashrate\",\n      icon: \"Crown\",\n      category: \"mining\",\n      criteria: { type: \"total_hashrate\", value: 50 },\n      rewardMere: \"100.00\",\n      tier: \"gold\",\n    },\n    {\n      name: \"First Earnings\",\n      description: \"Earn your first MERE from mining\",\n      icon: \"Coins\",\n      category: \"mining\",\n      criteria: { type: \"total_mined\", value: 0.01 },\n      rewardMere: \"5.00\",\n      tier: \"bronze\",\n    },\n    {\n      name: \"MERE Millionaire\",\n      description: \"Mine 1000 MERE total\",\n      icon: \"BadgeDollarSign\",\n      category: \"mining\",\n      criteria: { type: \"total_mined\", value: 1000 },\n      rewardMere: \"250.00\",\n      tier: \"platinum\",\n    },\n    {\n      name: \"Premium Pass\",\n      description: \"Unlock the Season Pass premium tier\",\n      icon: \"Star\",\n      category: \"special\",\n      criteria: { type: \"season_pass_premium\", value: 1 },\n      rewardMere: \"20.00\",\n      tier: \"gold\",\n    },\n    {\n      name: \"Social Butterfly\",\n      description: \"Refer 5 friends who make a purchase\",\n      icon: \"Users\",\n      category: \"social\",\n      criteria: { type: \"successful_referrals\", value: 5 },\n      rewardMere: \"75.00\",\n      tier: \"gold\",\n    },\n  ];\n\n  await db.insert(achievements).values(achievementsData);\n  console.log(\"✓ Achievements created\");\n\n  console.log(\"Database seeded successfully!\");\n}\n\nseed().catch((error) => {\n  console.error(\"Error seeding database:\", error);\n  process.exit(1);\n});\n","size_bytes":8995},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport path from \"path\";\nimport { earningsEngine } from \"./earnings\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\n// Serve attached assets (miner images, etc.)\napp.use(\"/attached_assets\", express.static(path.join(process.cwd(), \"attached_assets\")));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    \n    // Start earnings engine after server is listening\n    earningsEngine.start();\n  });\n})();\n","size_bytes":2505},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/pages/SeasonPass.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BottomNav } from \"@/components/BottomNav\";\nimport { Star, Lock, Check, Gift, Crown } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { formatMERE } from \"@/lib/constants\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { UserSeasonPass, SeasonPassReward } from \"@shared/schema\";\n\nexport default function SeasonPass() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // Fetch season pass data\n  const { data: userPass } = useQuery<UserSeasonPass & { \n    rewards: SeasonPassReward[];\n    seasonName: string;\n  }>({\n    queryKey: [\"/api/season-pass\"],\n  });\n\n  // Upgrade to premium mutation\n  const upgradeMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/season-pass/upgrade\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/season-pass\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Premium Unlocked!\",\n        description: \"You now have access to premium rewards\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Upgrade Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Claim reward mutation\n  const claimMutation = useMutation({\n    mutationFn: async (rewardId: string) => {\n      await apiRequest(\"POST\", \"/api/season-pass/claim\", { rewardId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/season-pass\"] });\n      toast({\n        title: \"Reward Claimed!\",\n        description: \"The reward has been added to your account\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Claim Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const currentTier = userPass?.currentTier || 0;\n  const hasPremium = userPass?.hasPremium || false;\n  const claimedRewards = (userPass?.claimedRewards as string[]) || [];\n  const maxTier = 20;\n  const progressPercent = (currentTier / maxTier) * 100;\n\n  const premiumRewards = userPass?.rewards.filter(r => r.isPremium) || [];\n\n  const getRewardIcon = (type: string) => {\n    switch (type) {\n      case \"mere\":\n        return <Star className=\"w-5 h-5 text-primary\" />;\n      case \"miner\":\n        return <Gift className=\"w-5 h-5 text-primary\" />;\n      case \"booster\":\n        return <Crown className=\"w-5 h-5 text-primary\" />;\n      default:\n        return <Gift className=\"w-5 h-5 text-primary\" />;\n    }\n  };\n\n  const getRewardLabel = (reward: SeasonPassReward) => {\n    switch (reward.rewardType) {\n      case \"mere\":\n        return `${formatMERE(reward.rewardValue || \"0\")} MERE`;\n      case \"miner\":\n        return `${(reward.rewardMetadata as any)?.name || \"Miner\"}`;\n      case \"booster\":\n        return `${(reward.rewardMetadata as any)?.name || \"Booster\"}`;\n      default:\n        return \"Reward\";\n    }\n  };\n\n  const canClaim = (tier: number) => currentTier >= tier;\n  const isClaimed = (rewardId: string) => claimedRewards.includes(rewardId);\n  \n  const upgradeCost = 999;\n  const canAffordUpgrade = user && parseFloat(user.mereBalance) >= upgradeCost;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background via-background to-accent/5 pb-20\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-40 bg-card/95 backdrop-blur-sm border-b border-border\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <h1 className=\"font-display font-bold text-2xl bg-gold-gradient bg-clip-text text-transparent flex items-center gap-2\">\n            <Star className=\"w-6 h-6 text-primary\" />\n            Season Pass\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-6 space-y-6\">\n        {/* Progress Overview */}\n        <Card className=\"p-6 bg-gradient-to-br from-card to-primary/10 border-primary/30\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h2 className=\"font-display font-bold text-xl\">{userPass?.seasonName || \"Current Season\"}</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                {hasPremium ? \"Premium Pass Active\" : \"Activate Premium to unlock all rewards\"}\n              </p>\n            </div>\n            {!hasPremium && (\n              <Button\n                onClick={() => upgradeMutation.mutate()}\n                disabled={!canAffordUpgrade || upgradeMutation.isPending}\n                className=\"bg-gold-gradient text-black font-bold\"\n                data-testid=\"button-upgrade-premium\"\n              >\n                {canAffordUpgrade ? \"Upgrade (999 MERE)\" : \"Insufficient Balance\"}\n              </Button>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Progress</span>\n              <span className=\"font-semibold\">Tier {currentTier} / {maxTier}</span>\n            </div>\n            <Progress value={progressPercent} className=\"h-3\" />\n            <p className=\"text-xs text-muted-foreground\">\n              Mine MERE to progress through tiers and unlock exclusive rewards\n            </p>\n          </div>\n        </Card>\n\n        {/* Rewards Track - Premium Only */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"font-display font-bold text-lg flex items-center gap-2\">\n              <Crown className=\"w-5 h-5 text-primary\" />\n              Premium Rewards\n            </h2>\n            {!hasPremium && (\n              <Button\n                onClick={() => upgradeMutation.mutate()}\n                disabled={!canAffordUpgrade || upgradeMutation.isPending}\n                className=\"bg-gold-gradient text-black font-bold\"\n                size=\"sm\"\n              >\n                Activate Premium\n              </Button>\n            )}\n          </div>\n\n          <div>\n            <div className=\"flex items-center gap-2 mb-3\">\n              <span className=\"text-sm text-muted-foreground\">\n                {hasPremium ? \"Claim your exclusive rewards\" : \"Unlock premium to access all rewards\"}\n              </span>\n            </div>\n            {premiumRewards.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>No premium rewards available. Please refresh the page.</p>\n              </div>\n            )}\n            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-3\">\n              {premiumRewards.map((reward) => {\n                const claimed = isClaimed(reward.id);\n                const unlocked = hasPremium && canClaim(reward.tier);\n                \n                return (\n                  <Card\n                    key={reward.id}\n                    className={`p-4 text-center border-2 ${\n                      claimed\n                        ? \"border-status-online bg-status-online/10\"\n                        : unlocked\n                        ? \"border-primary bg-gold-gradient/10\"\n                        : \"border-border opacity-50\"\n                    }`}\n                    data-testid={`reward-tier-${reward.tier}`}\n                  >\n                    <div className=\"text-xs font-semibold text-muted-foreground mb-2\" data-testid={`text-tier-${reward.tier}`}>\n                      Tier {reward.tier}\n                    </div>\n                    <div className=\"w-12 h-12 mx-auto mb-2 rounded-full bg-accent flex items-center justify-center\">\n                      {claimed ? (\n                        <Check className=\"w-6 h-6 text-status-online\" />\n                      ) : unlocked ? (\n                        getRewardIcon(reward.rewardType)\n                      ) : (\n                        <Lock className=\"w-5 h-5 text-muted-foreground\" />\n                      )}\n                    </div>\n                    <div className=\"text-sm font-semibold mb-2\" data-testid={`text-reward-${reward.tier}`}>\n                      {getRewardLabel(reward)}\n                    </div>\n                    {unlocked && !claimed && (\n                      <Button\n                        size=\"sm\"\n                        onClick={() => claimMutation.mutate(reward.id)}\n                        disabled={claimMutation.isPending}\n                        className=\"w-full bg-gold-gradient text-black\"\n                        data-testid={`button-claim-premium-${reward.tier}`}\n                      >\n                        Claim\n                      </Button>\n                    )}\n                    {claimed && (\n                      <Badge className=\"bg-status-online text-white text-xs\">Claimed</Badge>\n                    )}\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        {/* Premium Benefits */}\n        {!hasPremium && (\n          <Card className=\"p-6 bg-gradient-to-br from-card to-primary/20 border-primary/50\">\n            <h3 className=\"font-display font-bold text-lg mb-4 flex items-center gap-2\">\n              <Crown className=\"w-5 h-5 text-primary\" />\n              Activate Premium Pass\n            </h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span>20 tiers of exclusive premium rewards</span>\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span>Earn up to 1,290 MERE in rewards (30% profit)</span>\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span>Unlock +10 TH/s total hashrate boosts</span>\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <Check className=\"w-4 h-4 text-primary\" />\n                <span>Progress automatically as you mine MERE</span>\n              </li>\n            </ul>\n            <Button\n              onClick={() => upgradeMutation.mutate()}\n              disabled={!canAffordUpgrade || upgradeMutation.isPending}\n              className=\"w-full mt-4 bg-gold-gradient text-black font-bold\"\n              size=\"lg\"\n              data-testid=\"button-upgrade-premium-cta\"\n            >\n              {canAffordUpgrade ? \"Activate Premium (999 MERE)\" : \"Insufficient Balance (Need 999 MERE)\"}\n            </Button>\n          </Card>\n        )}\n      </div>\n\n      <BottomNav />\n    </div>\n  );\n}\n","size_bytes":10993},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    refetchInterval: 5000, // Refetch every 5 seconds to keep totalMined and balance updated in real-time\n    refetchOnWindowFocus: true,\n    staleTime: 0, // Always consider data stale to ensure fresh updates\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":517},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/replitAuth.ts":{"content":"// Replit Auth setup - from javascript_log_in_with_replit blueprint\nimport * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  // Check if user already exists\n  const existingUser = await storage.getUser(claims[\"sub\"]);\n  \n  // Only generate referral code if user doesn't have one\n  const userReferralCode = existingUser?.referralCode || \n    `MERE${Math.random().toString(36).substring(2, 8).toUpperCase()}`;\n  \n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n    referralCode: userReferralCode,\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    // Note: Referral code will be handled in the callback route\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req: any, res, next) => {\n    // Store referral code in session if provided in query params\n    if (req.query.ref && typeof req.query.ref === 'string') {\n      req.session.referralCode = req.query.ref;\n    }\n    \n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req: any, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, async (err: any, user: any, info: any) => {\n      if (err) return next(err);\n      if (!user) return res.redirect(\"/api/login\");\n      \n      // Handle referral code linking if present in session\n      if (req.session?.referralCode && user?.claims?.sub) {\n        const referralCode = req.session.referralCode;\n        const currentUser = await storage.getUser(user.claims.sub);\n        \n        // Security: Only link referral once and prevent self-referral\n        if (currentUser && !currentUser.referredById) {\n          const referrer = await storage.getUserByReferralCode(referralCode);\n          \n          // Prevent self-referral\n          if (referrer && referrer.id !== user.claims.sub) {\n            // Update the newly created/logged in user with referredById\n            await db.update(users).set({\n              referredById: referrer.id,\n            }).where(eq(users.id, user.claims.sub));\n            \n            // Increment referrer's count (only once)\n            await storage.incrementReferralCount(referrer.id);\n          }\n        }\n        \n        delete req.session.referralCode;\n      }\n      \n      req.logIn(user, (err: any) => {\n        if (err) return next(err);\n        return res.redirect(\"/\");\n      });\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  // Check email/password session first\n  const sessionUserId = (req.session as any)?.userId;\n  if (sessionUserId) {\n    return next();\n  }\n  \n  // Fall back to Replit Auth\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user?.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":6315},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/BottomNav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, ShoppingBag, Trophy, Star, User, Gamepad2 } from \"lucide-react\";\n\nexport function BottomNav() {\n  const [location] = useLocation();\n\n  const navItems = [\n    { icon: Home, label: \"Mine\", path: \"/\", testId: \"nav-mining\" },\n    { icon: ShoppingBag, label: \"Shop\", path: \"/shop\", testId: \"nav-shop\" },\n    { icon: Gamepad2, label: \"Games\", path: \"/games\", testId: \"nav-games\" },\n    { icon: Trophy, label: \"Ranks\", path: \"/leaderboard\", testId: \"nav-leaderboard\" },\n    { icon: Star, label: \"Pass\", path: \"/season-pass\", testId: \"nav-season-pass\" },\n    { icon: User, label: \"Profile\", path: \"/profile\", testId: \"nav-profile\" },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 z-50 bg-card border-t border-border safe-area-pb\">\n      <div className=\"max-w-md mx-auto grid grid-cols-6 h-16\">\n        {navItems.map(({ icon: Icon, label, path, testId }) => {\n          const isActive = location === path;\n          return (\n            <Link key={path} href={path}>\n              <div\n                className={`flex flex-col items-center justify-center h-full gap-1 transition-colors cursor-pointer ${\n                  isActive\n                    ? \"text-primary\"\n                    : \"text-muted-foreground hover-elevate\"\n                }`}\n                data-testid={testId}\n              >\n                <Icon className={`w-5 h-5 ${isActive ? \"animate-pulse-glow\" : \"\"}`} />\n                <span className=\"text-xs font-medium\">{label}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1626},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/Profile.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BottomNav } from \"@/components/BottomNav\";\nimport { Input } from \"@/components/ui/input\";\nimport { User as UserIcon, Trophy, Zap, TrendingUp, LogOut, Copy, Check, Lock, ShoppingCart, Package, Grid3x3, Crown, Coins, BadgeDollarSign, Star, Users, Edit2, X as XIcon } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { formatMERE, formatUSD, mereToUSD } from \"@/lib/constants\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface AchievementWithProgress {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  category: string;\n  tier: string;\n  rewardMere: string;\n  progress: number;\n  isUnlocked: boolean;\n  unlockedAt: Date | null;\n  criteria: {\n    type: string;\n    value: number;\n  };\n}\n\nconst iconMap: Record<string, any> = {\n  ShoppingCart,\n  Package,\n  Zap,\n  Grid3x3,\n  TrendingUp,\n  Crown,\n  Coins,\n  BadgeDollarSign,\n  Star,\n  Users,\n  Trophy,\n};\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [copiedReferral, setCopiedReferral] = useState(false);\n  const [isEditingName, setIsEditingName] = useState(false);\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n\n  const { data: achievements } = useQuery<AchievementWithProgress[]>({\n    queryKey: [\"/api/achievements\"],\n  });\n\n  const { data: referralStats } = useQuery<{\n    totalReferrals: number;\n    totalReferralEarnings: number;\n    referrals: Array<{\n      id: string;\n      name: string;\n      totalMined: number;\n      joinedAt: Date | null;\n    }>;\n    recentBonuses: Array<{\n      id: string;\n      amount: number;\n      description: string | null;\n      createdAt: Date | null;\n    }>;\n  }>({\n    queryKey: [\"/api/referrals\"],\n  });\n\n  const handleCopyReferral = () => {\n    if (user?.referralCode) {\n      navigator.clipboard.writeText(`https://mereminers.com/ref/${user.referralCode}`);\n      setCopiedReferral(true);\n      setTimeout(() => setCopiedReferral(false), 2000);\n      toast({\n        title: \"Copied!\",\n        description: \"Referral link copied to clipboard\",\n      });\n    }\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const updateNameMutation = useMutation({\n    mutationFn: async (data: { firstName: string; lastName: string }) => {\n      return await apiRequest(\"PATCH\", \"/api/profile/update-name\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setIsEditingName(false);\n      toast({\n        title: \"Success!\",\n        description: \"Name updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update name\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditName = () => {\n    const fullName = user?.firstName && user?.lastName \n      ? `${user.firstName} ${user.lastName}`\n      : user?.firstName || \"\";\n    setFirstName(fullName);\n    setIsEditingName(true);\n  };\n\n  const handleSaveName = () => {\n    if (firstName.trim()) {\n      const nameParts = firstName.trim().split(' ');\n      const firstName_ = nameParts[0] || \"\";\n      const lastName_ = nameParts.slice(1).join(' ') || \"\";\n      updateNameMutation.mutate({ firstName: firstName_, lastName: lastName_ });\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditingName(false);\n    setFirstName(\"\");\n    setLastName(\"\");\n  };\n\n  const mereBalance = parseFloat(user?.mereBalance || \"0\");\n  const totalMined = parseFloat(user?.totalMined || \"0\");\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background via-background to-accent/5 pb-20\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-40 bg-card/95 backdrop-blur-sm border-b border-border\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <h1 className=\"font-display font-bold text-2xl bg-gold-gradient bg-clip-text text-transparent flex items-center gap-2\">\n            <UserIcon className=\"w-6 h-6 text-primary\" />\n            Profile\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-6 space-y-6\">\n        {/* Profile Card */}\n        <Card className=\"p-6 bg-gradient-to-br from-card to-accent/20 border-card-border\">\n          <div className=\"flex items-start gap-4\">\n            <Avatar className=\"w-20 h-20 border-2 border-primary\">\n              <AvatarImage src={user?.profileImageUrl || \"\"} />\n              <AvatarFallback className=\"bg-primary text-primary-foreground text-2xl\">\n                {user?.firstName?.[0] || user?.email?.[0]?.toUpperCase() || \"U\"}\n              </AvatarFallback>\n            </Avatar>\n            \n            <div className=\"flex-1\">\n              {!isEditingName ? (\n                <>\n                  <div className=\"flex items-center justify-between gap-2 mb-3\">\n                    <h2 className=\"font-display font-bold text-xl\" data-testid=\"text-user-name\">\n                      {user?.firstName && user?.lastName\n                        ? `${user.firstName} ${user.lastName}`\n                        : user?.firstName || user?.email?.split(\"@\")[0] || \"Miner\"}\n                    </h2>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={handleEditName}\n                      className=\"text-primary hover:text-primary\"\n                      data-testid=\"button-change-name\"\n                    >\n                      <Edit2 className=\"w-4 h-4 mr-1\" />\n                      Change Name\n                    </Button>\n                  </div>\n                  <Badge className=\"bg-primary text-primary-foreground\">Active Miner</Badge>\n                </>\n              ) : (\n                <div className=\"space-y-3\">\n                  <Input\n                    placeholder=\"Name\"\n                    value={firstName}\n                    onChange={(e) => setFirstName(e.target.value)}\n                    data-testid=\"input-name\"\n                  />\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={handleSaveName}\n                      disabled={!firstName.trim() || updateNameMutation.isPending}\n                      className=\"bg-gold-gradient text-black font-bold\"\n                      data-testid=\"button-save-name\"\n                    >\n                      {updateNameMutation.isPending ? \"Saving...\" : \"Save\"}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleCancelEdit}\n                      disabled={updateNameMutation.isPending}\n                      data-testid=\"button-cancel-edit\"\n                    >\n                      <XIcon className=\"w-4 h-4 mr-1\" />\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleLogout}\n              className=\"text-muted-foreground hover:text-destructive\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </Card>\n\n        {/* Stats Grid */}\n        <div className=\"grid sm:grid-cols-2 gap-4\">\n          <Card className=\"p-6 border-card-border\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                <TrendingUp className=\"w-5 h-5 text-primary\" />\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Mined</div>\n            </div>\n            <div className=\"font-display font-bold text-3xl bg-gold-gradient bg-clip-text text-transparent\" data-testid=\"text-total-mined\">\n              {formatMERE(totalMined)}\n            </div>\n            <div className=\"text-sm text-muted-foreground mt-1\">\n              ≈ {mereToUSD(totalMined).toFixed(2)} USDT\n            </div>\n          </Card>\n\n          <Card className=\"p-6 border-card-border\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                <Zap className=\"w-5 h-5 text-primary\" />\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Current Balance</div>\n            </div>\n            <div className=\"font-display font-bold text-3xl bg-gold-gradient bg-clip-text text-transparent\" data-testid=\"text-current-balance\">\n              {formatMERE(mereBalance)}\n            </div>\n            <div className=\"text-sm text-muted-foreground mt-1\">\n              ≈ {mereToUSD(mereBalance).toFixed(2)} USDT\n            </div>\n          </Card>\n        </div>\n\n        {/* Referral Card */}\n        {user?.referralCode && (\n          <Card className=\"p-6 bg-gradient-to-br from-card to-primary/10 border-primary/30\">\n            <h3 className=\"font-display font-bold text-lg mb-4 flex items-center gap-2\">\n              <Users className=\"w-5 h-5 text-primary\" />\n              Referral Program\n            </h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Share your referral link and earn 10% of your friends' mining rewards!\n            </p>\n            <div className=\"flex gap-2 mb-4\">\n              <div className=\"flex-1 bg-accent rounded-md p-3 font-mono text-sm overflow-x-auto\">\n                mereminers.com/ref/{user.referralCode}\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={handleCopyReferral}\n                data-testid=\"button-copy-referral\"\n              >\n                {copiedReferral ? <Check className=\"w-4 h-4\" /> : <Copy className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n\n            {referralStats && (\n              <div className=\"grid grid-cols-2 gap-3 pt-4 border-t border-primary/20\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-display font-bold text-primary\" data-testid=\"text-total-referrals\">\n                    {referralStats.totalReferrals}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Friends Referred</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-display font-bold text-primary\" data-testid=\"text-referral-earnings\">\n                    {formatMERE(referralStats.totalReferralEarnings)}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Total Earned</div>\n                </div>\n              </div>\n            )}\n\n            {referralStats && referralStats.referrals && referralStats.referrals.length > 0 && (\n              <div className=\"mt-4 pt-4 border-t border-primary/20\">\n                <h4 className=\"font-semibold text-sm mb-2\">Your Referrals</h4>\n                <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                  {referralStats.referrals.map((referral) => (\n                    <div\n                      key={referral.id}\n                      className=\"flex items-center justify-between p-2 rounded-md bg-accent/50\"\n                      data-testid={`referral-${referral.id}`}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center\">\n                          <UserIcon className=\"w-4 h-4 text-primary\" />\n                        </div>\n                        <div>\n                          <div className=\"text-sm font-semibold\">{referral.name}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Mined: {formatMERE(referral.totalMined)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </Card>\n        )}\n\n        {/* Achievements Section */}\n        <Card className=\"p-6 border-card-border\">\n          <h3 className=\"font-display font-bold text-lg mb-4 flex items-center gap-2\">\n            <Trophy className=\"w-5 h-5 text-primary\" />\n            Achievements\n          </h3>\n          {achievements && achievements.length > 0 ? (\n            <div className=\"grid sm:grid-cols-2 gap-3\">\n              {achievements.map((achievement) => {\n                const Icon = iconMap[achievement.icon] || Trophy;\n                const progressPercent = achievement.criteria \n                  ? Math.min(100, (achievement.progress / achievement.criteria.value) * 100)\n                  : 0;\n\n                return (\n                  <div\n                    key={achievement.id}\n                    className={`p-3 rounded-lg border ${\n                      achievement.isUnlocked\n                        ? \"bg-primary/5 border-primary/30\"\n                        : \"bg-muted/30 border-border opacity-60\"\n                    }`}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 ${\n                        achievement.isUnlocked\n                          ? \"bg-primary/20\"\n                          : \"bg-muted\"\n                      }`}>\n                        {achievement.isUnlocked ? (\n                          <Icon className=\"w-5 h-5 text-primary\" />\n                        ) : (\n                          <Lock className=\"w-5 h-5 text-muted-foreground\" />\n                        )}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <div className=\"font-semibold text-sm truncate\">{achievement.name}</div>\n                          {achievement.isUnlocked && (\n                            <Badge variant=\"secondary\" className=\"text-xs px-1.5 py-0\">\n                              {achievement.tier}\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground mb-2\">\n                          {achievement.description}\n                        </div>\n                        {!achievement.isUnlocked && achievement.criteria && (\n                          <div className=\"space-y-1\">\n                            <Progress value={progressPercent} className=\"h-1.5\" />\n                            <div className=\"text-xs text-muted-foreground\">\n                              {achievement.progress} / {achievement.criteria.value}\n                            </div>\n                          </div>\n                        )}\n                        {achievement.isUnlocked && achievement.rewardMere && parseFloat(achievement.rewardMere) > 0 && (\n                          <div className=\"text-xs text-primary font-semibold\">\n                            +{formatMERE(parseFloat(achievement.rewardMere))} reward claimed\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Trophy className=\"w-12 h-12 mx-auto mb-3 opacity-30\" />\n              <p>No achievements available yet</p>\n            </div>\n          )}\n        </Card>\n\n        {/* Account Actions */}\n        <Card className=\"p-6 border-destructive/30\">\n          <h3 className=\"font-display font-bold text-lg mb-4\">Account Actions</h3>\n          <Button\n            variant=\"destructive\"\n            onClick={handleLogout}\n            className=\"w-full\"\n            data-testid=\"button-logout-main\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Sign Out\n          </Button>\n        </Card>\n      </div>\n\n      <BottomNav />\n    </div>\n  );\n}\n","size_bytes":16713},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/pages/Leaderboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BottomNav } from \"@/components/BottomNav\";\nimport { Trophy, Medal, Crown, Zap, TrendingUp } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { formatMERE } from \"@/lib/constants\";\nimport type { LeaderboardEntry, User } from \"@shared/schema\";\n\ninterface LeaderboardEntryWithUser extends LeaderboardEntry {\n  user: User;\n}\n\nexport default function Leaderboard() {\n  const { user: currentUser } = useAuth();\n\n  // Fetch leaderboard\n  const { data: leaderboard = [], isLoading } = useQuery<LeaderboardEntryWithUser[]>({\n    queryKey: [\"/api/leaderboard\"],\n  });\n\n  // Fetch current season\n  const { data: season } = useQuery<{ id: string; name: string; endAt: string }>({\n    queryKey: [\"/api/leaderboard/season\"],\n  });\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Crown className=\"w-6 h-6 text-gold-DEFAULT\" />;\n      case 2:\n        return <Medal className=\"w-6 h-6 text-gray-400\" />;\n      case 3:\n        return <Medal className=\"w-6 h-6 text-amber-700\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getRankBadge = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Badge className=\"bg-gold-gradient text-black font-bold\">1st</Badge>;\n      case 2:\n        return <Badge className=\"bg-gradient-to-r from-gray-300 to-gray-500 text-white font-bold\">2nd</Badge>;\n      case 3:\n        return <Badge className=\"bg-gradient-to-r from-amber-600 to-amber-800 text-white font-bold\">3rd</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{rank}th</Badge>;\n    }\n  };\n\n  const daysLeft = season?.endAt ? Math.ceil((new Date(season.endAt).getTime() - Date.now()) / (1000 * 60 * 60 * 24)) : 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center pb-20\">\n        <div className=\"animate-pulse text-primary\">Loading leaderboard...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background via-background to-accent/5 pb-20\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-40 bg-card/95 backdrop-blur-sm border-b border-border\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"font-display font-bold text-2xl bg-gold-gradient bg-clip-text text-transparent flex items-center gap-2\">\n              <Trophy className=\"w-6 h-6 text-primary\" />\n              Ranks\n            </h1>\n            {season && (\n              <div className=\"text-right\">\n                <div className=\"text-sm font-semibold text-foreground\">{season.name}</div>\n                <div className=\"text-xs text-muted-foreground\">{daysLeft} days left</div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-6 space-y-6\">\n        {/* Top 3 Podium */}\n        {leaderboard.length >= 3 && (\n          <div className=\"grid grid-cols-3 gap-4 items-end mb-6\">\n            {/* 2nd Place */}\n            <div className=\"text-center\">\n              <Card className=\"p-4 bg-gradient-to-br from-card to-gray-500/10 border-gray-400/30\">\n                <div className=\"flex justify-center mb-2\">\n                  <Medal className=\"w-8 h-8 text-gray-400\" />\n                </div>\n                <Avatar className=\"w-16 h-16 mx-auto mb-2 border-2 border-gray-400\">\n                  <AvatarImage src={leaderboard[1]?.user.profileImageUrl || \"\"} />\n                  <AvatarFallback className=\"bg-gray-500 text-white\">\n                    {leaderboard[1]?.user.firstName?.[0] || \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"font-semibold text-sm truncate\">\n                  {leaderboard[1]?.user.firstName || \"User\"}\n                </div>\n                <div className=\"text-xs text-muted-foreground mb-2\">\n                  {formatMERE(leaderboard[1]?.totalMined || \"0\")} MERE\n                </div>\n                <Badge className=\"bg-gradient-to-r from-gray-300 to-gray-500 text-white text-xs\">2nd</Badge>\n              </Card>\n            </div>\n\n            {/* 1st Place */}\n            <div className=\"text-center\">\n              <Card className=\"p-4 bg-gradient-to-br from-card to-primary/20 border-primary/50 relative\">\n                <div className=\"absolute -top-3 left-1/2 -translate-x-1/2\">\n                  <div className=\"bg-gold-gradient w-12 h-12 rounded-full flex items-center justify-center animate-pulse-glow\">\n                    <Crown className=\"w-6 h-6 text-black\" />\n                  </div>\n                </div>\n                <div className=\"mt-2\" />\n                <Avatar className=\"w-20 h-20 mx-auto mb-2 border-4 border-primary\">\n                  <AvatarImage src={leaderboard[0]?.user.profileImageUrl || \"\"} />\n                  <AvatarFallback className=\"bg-primary text-primary-foreground text-xl\">\n                    {leaderboard[0]?.user.firstName?.[0] || \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"font-bold text-base truncate\">\n                  {leaderboard[0]?.user.firstName || \"User\"}\n                </div>\n                <div className=\"text-xs text-muted-foreground mb-2\">\n                  {formatMERE(leaderboard[0]?.totalMined || \"0\")} MERE\n                </div>\n                <Badge className=\"bg-gold-gradient text-black font-bold\">1st</Badge>\n              </Card>\n            </div>\n\n            {/* 3rd Place */}\n            <div className=\"text-center\">\n              <Card className=\"p-4 bg-gradient-to-br from-card to-amber-700/10 border-amber-700/30\">\n                <div className=\"flex justify-center mb-2\">\n                  <Medal className=\"w-8 h-8 text-amber-700\" />\n                </div>\n                <Avatar className=\"w-16 h-16 mx-auto mb-2 border-2 border-amber-700\">\n                  <AvatarImage src={leaderboard[2]?.user.profileImageUrl || \"\"} />\n                  <AvatarFallback className=\"bg-amber-700 text-white\">\n                    {leaderboard[2]?.user.firstName?.[0] || \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"font-semibold text-sm truncate\">\n                  {leaderboard[2]?.user.firstName || \"User\"}\n                </div>\n                <div className=\"text-xs text-muted-foreground mb-2\">\n                  {formatMERE(leaderboard[2]?.totalMined || \"0\")} MERE\n                </div>\n                <Badge className=\"bg-gradient-to-r from-amber-600 to-amber-800 text-white text-xs\">3rd</Badge>\n              </Card>\n            </div>\n          </div>\n        )}\n\n        {/* Full Rankings */}\n        <div>\n          <h2 className=\"font-display font-bold text-lg mb-4\">Rankings</h2>\n          \n          {leaderboard.length === 0 ? (\n            <Card className=\"p-12 text-center border-card-border\">\n              <Trophy className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n              <p className=\"text-muted-foreground\">No rankings yet. Start mining to appear on the leaderboard!</p>\n            </Card>\n          ) : (\n            <div className=\"space-y-2\">\n              {leaderboard.map((entry, index) => {\n                const isCurrentUser = entry.userId === currentUser?.id;\n                return (\n                  <Card\n                    key={entry.id}\n                    className={`p-4 border-card-border hover-elevate ${\n                      isCurrentUser ? \"border-primary/50 bg-primary/5\" : \"\"\n                    }`}\n                    data-testid={`leaderboard-entry-${index + 1}`}\n                  >\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex items-center justify-center w-12\">\n                        {getRankIcon(entry.rank || index + 1) || (\n                          <div className=\"text-2xl font-display font-bold text-muted-foreground\">\n                            {entry.rank || index + 1}\n                          </div>\n                        )}\n                      </div>\n\n                      <Avatar className=\"w-12 h-12\">\n                        <AvatarImage src={entry.user.profileImageUrl || \"\"} />\n                        <AvatarFallback className=\"bg-accent text-foreground\">\n                          {entry.user.firstName?.[0] || entry.user.email?.[0]?.toUpperCase() || \"U\"}\n                        </AvatarFallback>\n                      </Avatar>\n\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"font-semibold text-foreground flex items-center gap-2\">\n                          {entry.user.firstName || entry.user.email?.split(\"@\")[0] || \"Anonymous\"}\n                          {isCurrentUser && (\n                            <Badge variant=\"outline\" className=\"text-xs\">You</Badge>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-3 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <TrendingUp className=\"w-3 h-3\" />\n                            <span>{formatMERE(entry.totalMined)} MERE</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Zap className=\"w-3 h-3\" />\n                            <span>{entry.totalHashrate.toFixed(2)} TH/s</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        {getRankBadge(entry.rank || index + 1)}\n                      </div>\n                    </div>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </div>\n\n        {/* Season Rewards Info */}\n        <Card className=\"p-6 bg-gradient-to-br from-card to-primary/10 border-primary/30\">\n          <h3 className=\"font-display font-bold text-lg mb-3 flex items-center gap-2\">\n            <Trophy className=\"w-5 h-5 text-primary\" />\n            Season Rewards\n          </h3>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-muted-foreground\">1st Place:</span>\n              <span className=\"font-semibold text-primary\">1000 MERE + Legendary Miner</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-muted-foreground\">2nd Place:</span>\n              <span className=\"font-semibold\">500 MERE + Epic Miner</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-muted-foreground\">3rd Place:</span>\n              <span className=\"font-semibold\">250 MERE + Rare Miner</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-muted-foreground\">Top 10:</span>\n              <span className=\"font-semibold\">100 MERE</span>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      <BottomNav />\n    </div>\n  );\n}\n","size_bytes":11454},"client/src/pages/Wallet.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { BottomNav } from \"@/components/BottomNav\";\nimport { Wallet as WalletIcon, ArrowDownToLine, ArrowUpFromLine, Copy, Check, ExternalLink, ArrowLeftRight } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { formatMERE, mereToUSD, usdToMERE, MERE_TO_USD_RATE } from \"@/lib/constants\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Transaction } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function Wallet() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [showDeposit, setShowDeposit] = useState(false);\n  const [showWithdraw, setShowWithdraw] = useState(false);\n  const [showConvert, setShowConvert] = useState(false);\n  const [withdrawAmount, setWithdrawAmount] = useState(\"\");\n  const [convertAmount, setConvertAmount] = useState(\"\");\n  const [convertDirection, setConvertDirection] = useState<\"mere-to-usdt\" | \"usdt-to-mere\">(\"mere-to-usdt\");\n  const [depositAddress, setDepositAddress] = useState(\"\");\n  const [copied, setCopied] = useState(false);\n  const [withdrawAddress, setWithdrawAddress] = useState(\"\");\n\n  // Fetch transactions\n  const { data: transactions = [] } = useQuery<Transaction[]>({\n    queryKey: [\"/api/wallet/transactions\"],\n  });\n\n  // Generate deposit address\n  const generateDepositMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/wallet/deposit/generate\", {});\n      return response;\n    },\n    onSuccess: (data: any) => {\n      setDepositAddress(data.address);\n    },\n  });\n\n  // Withdraw mutation\n  const withdrawMutation = useMutation({\n    mutationFn: async (data: { amountUsdt: string, address: string }) => {\n      await apiRequest(\"POST\", \"/api/wallet/withdraw\", { \n        amountMere: usdToMERE(parseFloat(data.amountUsdt)).toString(),\n        address: data.address\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet/transactions\"] });\n      setShowWithdraw(false);\n      setWithdrawAmount(\"\");\n      setWithdrawAddress(\"\");\n      toast({\n        title: \"Withdrawal Initiated\",\n        description: \"Your withdrawal is being processed\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Withdrawal Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Convert mutation\n  const convertMutation = useMutation({\n    mutationFn: async (data: { fromCurrency: string, toCurrency: string, amount: string }) => {\n      await apiRequest(\"POST\", \"/api/wallet/convert\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet/transactions\"] });\n      setShowConvert(false);\n      setConvertAmount(\"\");\n      toast({\n        title: \"Conversion Successful\",\n        description: \"Your funds have been converted\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Conversion Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCopyAddress = () => {\n    navigator.clipboard.writeText(depositAddress);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n    toast({\n      title: \"Copied!\",\n      description: \"Address copied to clipboard\",\n    });\n  };\n\n  const handleDeposit = () => {\n    setShowDeposit(true);\n    if (!depositAddress) {\n      generateDepositMutation.mutate();\n    }\n  };\n\n  const handleWithdraw = () => {\n    if (!withdrawAmount || parseFloat(withdrawAmount) <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (!withdrawAddress || withdrawAddress.length < 10) {\n      toast({\n        title: \"Invalid Address\",\n        description: \"Please enter a valid USDT(TRC-20) wallet address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    withdrawMutation.mutate({ amountUsdt: withdrawAmount, address: withdrawAddress });\n  };\n\n  const handleConvert = () => {\n    if (!convertAmount || parseFloat(convertAmount) <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    convertMutation.mutate({\n      fromCurrency: convertDirection === \"mere-to-usdt\" ? \"MERE\" : \"USDT\",\n      toCurrency: convertDirection === \"mere-to-usdt\" ? \"USDT\" : \"MERE\",\n      amount: convertAmount\n    });\n  };\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case \"deposit\":\n        return <ArrowDownToLine className=\"w-4 h-4 text-status-online\" />;\n      case \"withdrawal\":\n        return <ArrowUpFromLine className=\"w-4 h-4 text-status-busy\" />;\n      case \"purchase\":\n        return <WalletIcon className=\"w-4 h-4 text-primary\" />;\n      case \"earnings\":\n        return <TrendingUp className=\"w-4 h-4 text-primary\" />;\n      case \"conversion\":\n        return <ArrowLeftRight className=\"w-4 h-4 text-primary\" />;\n      default:\n        return <WalletIcon className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getTransactionColor = (type: string) => {\n    switch (type) {\n      case \"deposit\":\n      case \"earnings\":\n      case \"reward\":\n        return \"text-status-online\";\n      case \"withdrawal\":\n      case \"purchase\":\n        return \"text-status-busy\";\n      case \"conversion\":\n        return \"text-primary\";\n      default:\n        return \"text-foreground\";\n    }\n  };\n\n  const mereBalance = parseFloat(user?.mereBalance || \"0\");\n  const usdtBalance = parseFloat(user?.usdtBalance || \"0\");\n  const withdrawAmountUsdt = parseFloat(withdrawAmount) || 0;\n  const withdrawFee = withdrawAmountUsdt * 0.02; // 2% fee\n  const withdrawTotal = withdrawAmountUsdt - withdrawFee;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background via-background to-accent/5 pb-20\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-40 bg-card/95 backdrop-blur-sm border-b border-border\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <h1 className=\"font-display font-bold text-2xl bg-gold-gradient bg-clip-text text-transparent flex items-center gap-2\">\n            <WalletIcon className=\"w-6 h-6 text-primary\" />\n            Wallet\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-6 space-y-6\">\n        {/* Balance Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {/* MERE Balance Card */}\n          <Card className=\"p-6 border-primary/30 bg-gradient-to-br from-card to-accent/20\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"text-sm text-muted-foreground\">MERE Balance</div>\n              <div className=\"text-4xl font-display font-bold bg-gold-gradient bg-clip-text text-transparent\" data-testid=\"text-mere-balance\">\n                {formatMERE(mereBalance)}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">MERE</div>\n            </div>\n          </Card>\n\n          {/* USDT Balance Card */}\n          <Card className=\"p-6 border-primary/30 bg-gradient-to-br from-card to-accent/20\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"text-sm text-muted-foreground\">USDT Balance</div>\n              <div className=\"text-4xl font-display font-bold text-primary\" data-testid=\"text-usdt-balance\">\n                {usdtBalance.toFixed(2)}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">USDT</div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Exchange Rate Info */}\n        <Card className=\"p-4 bg-accent/10 border-primary/10\">\n          <div className=\"text-center text-sm text-muted-foreground\">\n            Exchange Rate: <span className=\"text-foreground font-semibold\">1 MERE = {MERE_TO_USD_RATE.toFixed(2)} USDT</span>\n          </div>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2 justify-center flex-wrap\">\n          <Button\n            onClick={handleDeposit}\n            className=\"flex-1 min-w-[140px] bg-gold-gradient text-black font-bold\"\n            data-testid=\"button-deposit\"\n          >\n            <ArrowDownToLine className=\"w-4 h-4 mr-2\" />\n            Deposit\n          </Button>\n          <Button\n            onClick={() => setShowWithdraw(true)}\n            variant=\"outline\"\n            className=\"flex-1 min-w-[140px]\"\n            data-testid=\"button-withdraw\"\n          >\n            <ArrowUpFromLine className=\"w-4 h-4 mr-2\" />\n            Withdraw\n          </Button>\n          <Button\n            onClick={() => setShowConvert(true)}\n            variant=\"secondary\"\n            className=\"flex-1 min-w-[140px]\"\n            data-testid=\"button-convert\"\n          >\n            <ArrowLeftRight className=\"w-4 h-4 mr-2\" />\n            Convert\n          </Button>\n        </div>\n\n        {/* Transaction History */}\n        <div>\n          <h2 className=\"font-display font-bold text-lg mb-4\">Transaction History</h2>\n          \n          {transactions.length === 0 ? (\n            <Card className=\"p-12 text-center border-card-border\">\n              <p className=\"text-muted-foreground\">No transactions yet</p>\n            </Card>\n          ) : (\n            <div className=\"space-y-2\">\n              {transactions.map((tx) => (\n                <Card key={tx.id} className=\"p-4 border-card-border hover-elevate\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-10 h-10 rounded-full bg-accent flex items-center justify-center\">\n                      {getTransactionIcon(tx.type)}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"font-semibold text-foreground capitalize\">\n                        {tx.description || tx.type}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {new Date(tx.createdAt!).toLocaleString()}\n                      </div>\n                      {tx.txHash && (\n                        <div className=\"text-xs text-muted-foreground font-mono flex items-center gap-1 mt-1\">\n                          {tx.txHash.slice(0, 8)}...{tx.txHash.slice(-6)}\n                          <ExternalLink className=\"w-3 h-3\" />\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"text-right\">\n                      <div className={`font-bold ${getTransactionColor(tx.type)}`}>\n                        {tx.type === \"withdrawal\" || tx.type === \"purchase\" ? \"-\" : \"+\"}\n                        {formatMERE(tx.amountMere)} MERE\n                      </div>\n                      {tx.amountUsd && (\n                        <div className=\"text-sm text-muted-foreground\">\n                          {parseFloat(tx.amountUsd).toFixed(2)} USDT\n                        </div>\n                      )}\n                      <div className=\"text-xs\">\n                        <span className={`inline-block px-2 py-0.5 rounded-full text-xs ${\n                          tx.status === \"completed\" ? \"bg-status-online/20 text-status-online\" :\n                          tx.status === \"pending\" ? \"bg-status-away/20 text-status-away\" :\n                          \"bg-status-busy/20 text-status-busy\"\n                        }`}>\n                          {tx.status}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Deposit Dialog */}\n      <Dialog open={showDeposit} onOpenChange={setShowDeposit}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Deposit USDT (TRC-20)</DialogTitle>\n            <DialogDescription>\n              Send USDT to this address to add funds to your wallet\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4 py-4\">\n            <Card className=\"p-4 bg-accent/20\">\n              <div className=\"text-sm text-muted-foreground mb-2\">\n                <strong>Important:</strong> Only send USDT (TRC-20) to this address. Other tokens will be lost.\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                <strong>Exchange Rate:</strong> 1 USDT = {(1 / MERE_TO_USD_RATE).toFixed(0)} MERE (1 MERE = {MERE_TO_USD_RATE.toFixed(2)} USDT)\n              </div>\n            </Card>\n\n            {depositAddress ? (\n              <>\n                <div className=\"bg-white p-4 rounded-lg\">\n                  <div className=\"w-full aspect-square bg-white rounded-lg flex items-center justify-center\">\n                    <div className=\"text-xs font-mono break-all text-center p-4 text-black\">\n                      {depositAddress}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm font-medium\">USDT(TRC-20) Address</div>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      value={depositAddress}\n                      readOnly\n                      className=\"font-mono text-sm\"\n                      data-testid=\"input-deposit-address\"\n                    />\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={handleCopyAddress}\n                      data-testid=\"button-copy-address\"\n                    >\n                      {copied ? <Check className=\"w-4 h-4\" /> : <Copy className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <Card className=\"p-4 bg-primary/10\">\n                  <div className=\"text-sm\">\n                    <div className=\"font-semibold mb-2\">Next Steps:</div>\n                    <ol className=\"list-decimal list-inside space-y-1 text-muted-foreground\">\n                      <li>Copy the address above</li>\n                      <li>Send USDT (TRC-20) from your wallet</li>\n                      <li>Wait for blockchain confirmations (usually 1-2 minutes)</li>\n                      <li>Your MERE balance will be updated automatically</li>\n                    </ol>\n                  </div>\n                </Card>\n              </>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Button\n                  onClick={() => generateDepositMutation.mutate()}\n                  disabled={generateDepositMutation.isPending}\n                  data-testid=\"button-generate-deposit\"\n                >\n                  {generateDepositMutation.isPending ? \"Generating...\" : \"Generate Deposit Address\"}\n                </Button>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Withdraw Dialog */}\n      <Dialog open={showWithdraw} onOpenChange={setShowWithdraw}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Withdraw USDT (TRC-20)</DialogTitle>\n            <DialogDescription>\n              Withdraw USDT to your external wallet\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Withdrawal Address USDT(TRC-20)</label>\n              <Input\n                type=\"text\"\n                placeholder=\"USDT(TRC-20) wallet address\"\n                value={withdrawAddress}\n                onChange={(e) => setWithdrawAddress(e.target.value)}\n                className=\"font-mono text-sm\"\n                data-testid=\"input-withdraw-address\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Amount (USDT)</label>\n              <Input\n                type=\"number\"\n                placeholder=\"0.00\"\n                value={withdrawAmount}\n                onChange={(e) => setWithdrawAmount(e.target.value)}\n                data-testid=\"input-withdraw-amount\"\n              />\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Available: {usdtBalance.toFixed(2)} USDT\n              </div>\n            </div>\n\n            {withdrawAmountUsdt > 0 && (\n              <Card className=\"p-4 space-y-2 bg-accent/20\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Amount:</span>\n                  <span>{withdrawAmountUsdt.toFixed(2)} USDT</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Fee (2%):</span>\n                  <span className=\"text-status-busy\">-{withdrawFee.toFixed(2)} USDT</span>\n                </div>\n                <div className=\"flex justify-between text-sm pt-2 border-t border-border\">\n                  <span className=\"font-semibold\">You will receive:</span>\n                  <div className=\"text-right\">\n                    <div className=\"font-bold text-primary\">{withdrawTotal.toFixed(2)} USDT</div>\n                  </div>\n                </div>\n              </Card>\n            )}\n\n            <Card className=\"p-4 bg-primary/10\">\n              <div className=\"text-sm text-muted-foreground\">\n                <strong>Important:</strong> Only withdraw to a valid USDT(TRC-20) wallet address. Withdrawals are final and cannot be reversed.\n              </div>\n            </Card>\n          </div>\n\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowWithdraw(false)} data-testid=\"button-cancel-withdraw\">\n              Cancel\n            </Button>\n            <Button\n              onClick={handleWithdraw}\n              disabled={withdrawAmountUsdt <= 0 || withdrawAmountUsdt > usdtBalance || !withdrawAddress || withdrawMutation.isPending}\n              className=\"bg-gold-gradient text-black font-bold\"\n              data-testid=\"button-confirm-withdraw\"\n            >\n              {withdrawMutation.isPending ? \"Processing...\" : \"Confirm Withdrawal\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Convert Dialog */}\n      <Dialog open={showConvert} onOpenChange={setShowConvert}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Convert Currency</DialogTitle>\n            <DialogDescription>\n              Convert between MERE and USDT instantly\n            </DialogDescription>\n          </DialogHeader>\n\n          <Tabs value={convertDirection} onValueChange={(v) => setConvertDirection(v as any)} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"mere-to-usdt\" data-testid=\"tab-mere-to-usdt\">MERE → USDT</TabsTrigger>\n              <TabsTrigger value=\"usdt-to-mere\" data-testid=\"tab-usdt-to-mere\">USDT → MERE</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"mere-to-usdt\" className=\"space-y-4 pt-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Amount (MERE)</label>\n                <Input\n                  type=\"number\"\n                  placeholder=\"0.00\"\n                  value={convertAmount}\n                  onChange={(e) => setConvertAmount(e.target.value)}\n                  data-testid=\"input-convert-amount-mere\"\n                />\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  Available: {formatMERE(mereBalance)} MERE\n                </div>\n              </div>\n\n              {parseFloat(convertAmount) > 0 && (\n                <Card className=\"p-4 space-y-2 bg-accent/20\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Convert:</span>\n                    <span>{formatMERE(parseFloat(convertAmount))} MERE</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Exchange Rate:</span>\n                    <span>1 MERE = {MERE_TO_USD_RATE.toFixed(2)} USDT</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm pt-2 border-t border-border\">\n                    <span className=\"font-semibold\">You will receive:</span>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold text-primary\">\n                        {mereToUSD(parseFloat(convertAmount)).toFixed(2)} USDT\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"usdt-to-mere\" className=\"space-y-4 pt-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Amount (USDT)</label>\n                <Input\n                  type=\"number\"\n                  placeholder=\"0.00\"\n                  value={convertAmount}\n                  onChange={(e) => setConvertAmount(e.target.value)}\n                  data-testid=\"input-convert-amount-usdt\"\n                />\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  Available: {usdtBalance.toFixed(2)} USDT\n                </div>\n              </div>\n\n              {parseFloat(convertAmount) > 0 && (\n                <Card className=\"p-4 space-y-2 bg-accent/20\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Convert:</span>\n                    <span>{parseFloat(convertAmount).toFixed(2)} USDT</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Exchange Rate:</span>\n                    <span>1 USDT = {(1 / MERE_TO_USD_RATE).toFixed(0)} MERE</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm pt-2 border-t border-border\">\n                    <span className=\"font-semibold\">You will receive:</span>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold text-primary\">\n                        {formatMERE(usdToMERE(parseFloat(convertAmount)))} MERE\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              )}\n            </TabsContent>\n          </Tabs>\n\n          <Card className=\"p-4 bg-primary/10\">\n            <div className=\"text-sm text-muted-foreground\">\n              <strong>Note:</strong> Conversions are instant with no fees. Exchange rate: 1 MERE = {MERE_TO_USD_RATE.toFixed(2)} USDT\n            </div>\n          </Card>\n\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowConvert(false)} data-testid=\"button-cancel-convert\">\n              Cancel\n            </Button>\n            <Button\n              onClick={handleConvert}\n              disabled={!convertAmount || parseFloat(convertAmount) <= 0 || convertMutation.isPending}\n              className=\"bg-gold-gradient text-black font-bold\"\n              data-testid=\"button-confirm-convert\"\n            >\n              {convertMutation.isPending ? \"Converting...\" : \"Confirm Conversion\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <BottomNav />\n    </div>\n  );\n}\n\nfunction TrendingUp({ className }: { className?: string }) {\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <polyline points=\"23 6 13.5 15.5 8.5 10.5 1 18\" />\n      <polyline points=\"17 6 23 6 23 12\" />\n    </svg>\n  );\n}\n","size_bytes":24638},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* DARK MODE (Default for MereMiners - Premium Black & Gold) */\n:root {\n  --button-outline: rgba(212, 175, 55, .15);\n  --badge-outline: rgba(212, 175, 55, .10);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: 9; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(212, 175, 55, .05);\n  --elevate-2: rgba(212, 175, 55, .12);\n\n  --background: 240 5% 4%;\n\n  --foreground: 43 10% 92%;\n\n  --border: 43 10% 12%;\n\n  --card: 240 4% 7%;\n\n  --card-foreground: 43 10% 92%;\n\n  --card-border: 43 20% 10%;\n\n  --sidebar: 240 5% 6%;\n\n  --sidebar-foreground: 43 10% 92%;\n\n  --sidebar-border: 43 10% 12%;\n\n  --sidebar-primary: 43 74% 52%;\n\n  --sidebar-primary-foreground: 43 10% 8%;\n\n  --sidebar-accent: 43 15% 12%;\n\n  --sidebar-accent-foreground: 43 10% 92%;\n\n  --sidebar-ring: 43 74% 52%;\n\n  --popover: 240 4% 8%;\n\n  --popover-foreground: 43 10% 92%;\n\n  --popover-border: 43 15% 15%;\n\n  --primary: 43 74% 52%;\n\n  --primary-foreground: 43 10% 8%;\n\n  --secondary: 240 4% 12%;\n\n  --secondary-foreground: 43 10% 92%;\n\n  --muted: 240 5% 11%;\n\n  --muted-foreground: 43 8% 60%;\n\n  --accent: 43 10% 15%;\n\n  --accent-foreground: 43 10% 88%;\n\n  --destructive: 0 72% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 43 10% 18%;\n  --ring: 43 74% 52%;\n  --chart-1: 43 100% 60%;\n  --chart-2: 25 95% 58%;\n  --chart-3: 151 55% 60%;\n  --chart-4: 217 91% 60%;\n  --chart-5: 280 67% 60%;\n\n  --font-sans: Poppins, Inter, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.30), 0px 0px 8px 0px hsl(43 74% 52% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.35), 0px 0px 10px 0px hsl(43 74% 52% / 0.08);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.30), 0px 2px 4px -1px hsl(0 0% 0% / 0.40), 0px 0px 12px 0px hsl(43 74% 52% / 0.10);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.30), 0px 2px 4px -1px hsl(0 0% 0% / 0.40), 0px 0px 12px 0px hsl(43 74% 52% / 0.10);\n  --shadow-md: 0px 4px 0px 0px hsl(0 0% 0% / 0.35), 0px 4px 6px -1px hsl(0 0% 0% / 0.45), 0px 0px 16px 0px hsl(43 74% 52% / 0.12);\n  --shadow-lg: 0px 6px 0px 0px hsl(0 0% 0% / 0.40), 0px 6px 10px -1px hsl(0 0% 0% / 0.50), 0px 0px 20px 0px hsl(43 74% 52% / 0.15);\n  --shadow-xl: 0px 10px 0px 0px hsl(0 0% 0% / 0.45), 0px 10px 16px -1px hsl(0 0% 0% / 0.55), 0px 0px 28px 0px hsl(43 74% 52% / 0.18);\n  --shadow-2xl: 0px 14px 0px 0px hsl(0 0% 0% / 0.50), 0px 0px 36px 0px hsl(43 74% 52% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 240 3% 4%;\n\n  --foreground: 43 10% 92%;\n\n  --border: 240 3% 12%;\n\n  --card: 240 3% 7%;\n\n  --card-foreground: 43 10% 92%;\n\n  --card-border: 240 3% 10%;\n\n  --sidebar: 240 3% 9%;\n\n  --sidebar-foreground: 43 10% 92%;\n\n  --sidebar-border: 240 3% 13%;\n\n  --sidebar-primary: 43 74% 52%;\n\n  --sidebar-primary-foreground: 43 10% 8%;\n\n  --sidebar-accent: 240 3% 12%;\n\n  --sidebar-accent-foreground: 43 10% 92%;\n\n  --sidebar-ring: 43 74% 52%;\n\n  --popover: 240 3% 11%;\n\n  --popover-foreground: 43 10% 92%;\n\n  --popover-border: 240 3% 15%;\n\n  --primary: 43 74% 52%;\n\n  --primary-foreground: 43 10% 8%;\n\n  --secondary: 240 3% 14%;\n\n  --secondary-foreground: 43 10% 92%;\n\n  --muted: 240 4% 13%;\n\n  --muted-foreground: 43 8% 65%;\n\n  --accent: 43 8% 15%;\n\n  --accent-foreground: 43 8% 88%;\n\n  --destructive: 0 72% 28%;\n\n  --destructive-foreground: 0 72% 96%;\n\n  --input: 240 3% 22%;\n  --ring: 43 74% 52%;\n  --chart-1: 43 100% 65%;\n  --chart-2: 25 95% 62%;\n  --chart-3: 151 55% 68%;\n  --chart-4: 217 91% 65%;\n  --chart-5: 280 67% 68%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 2px 4px -1px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 4px 6px -1px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 8px 10px -1px hsl(0 0% 0% / 0.40);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.30);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11078},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { calculateDiscountedPrice, TH_DAILY_YIELD_MERE, SLOT_EXPANSION_PRICE_MERE } from \"@shared/constants\";\nimport { db } from \"./db\";\nimport { achievements, userAchievements, users, minerTypes, userMiners, transactions, seasons } from \"@shared/schema\";\nimport { eq, sum, count, sql, isNotNull, and } from \"drizzle-orm\";\nimport { achievementsService } from \"./achievementsService\";\nimport { getReferralStats } from \"./referralService\";\nimport { signUp, signIn, requireUserId } from \"./emailAuth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Email/Password authentication routes\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const { email, password, referralCode } = req.body;\n      \n      const user = await signUp(email, password, referralCode);\n      \n      // Set session\n      (req.session as any).userId = user.id;\n      \n      res.json({ success: true, user: {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        mereBalance: user.mereBalance,\n        totalMined: user.totalMined,\n        referralCode: user.referralCode,\n        isAdmin: user.isAdmin,\n      }});\n    } catch (error: any) {\n      console.error(\"Sign up error:\", error);\n      res.status(400).json({ message: error.message || \"Failed to sign up\" });\n    }\n  });\n\n  app.post('/api/auth/signin', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      const user = await signIn(email, password);\n      \n      // Set session\n      (req.session as any).userId = user.id;\n      \n      res.json({ success: true, user: {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        mereBalance: user.mereBalance,\n        totalMined: user.totalMined,\n        referralCode: user.referralCode,\n        isAdmin: user.isAdmin,\n      }});\n    } catch (error: any) {\n      console.error(\"Sign in error:\", error);\n      res.status(400).json({ message: error.message || \"Failed to sign in\" });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to log out\" });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  // Auth routes (supports both Replit Auth and email/password)\n  app.get('/api/auth/user', async (req: any, res) => {\n    try {\n      // Check email/password session first\n      const sessionUserId = (req.session as any)?.userId;\n      if (sessionUserId) {\n        const user = await storage.getUser(sessionUserId);\n        return res.json(user);\n      }\n      \n      // Fall back to Replit Auth\n      if (req.user?.claims?.sub) {\n        const userId = requireUserId(req, res);\n      if (!userId) return;\n        const user = await storage.getUser(userId);\n        return res.json(user);\n      }\n      \n      res.status(401).json({ message: \"Unauthorized\" });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Helper function to get user ID from either auth method\n  function getUserId(req: any): string | null {\n    const sessionUserId = req.session?.userId;\n    if (sessionUserId) return sessionUserId;\n    return req.user?.claims?.sub || null;\n  }\n\n  // Profile routes\n  app.patch('/api/profile/update-name', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { firstName, lastName } = req.body;\n\n      if (!firstName) {\n        return res.status(400).json({ message: \"First name is required\" });\n      }\n\n      await db\n        .update(users)\n        .set({\n          firstName: firstName.trim(),\n          lastName: (lastName || \"\").trim(),\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId));\n\n      res.json({ success: true, message: \"Name updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating name:\", error);\n      res.status(500).json({ message: \"Failed to update name\" });\n    }\n  });\n\n  // Shop routes\n  app.get('/api/shop/miners', isAuthenticated, async (_req, res) => {\n    try {\n      const miners = await storage.getMinerTypes();\n      res.json(miners);\n    } catch (error) {\n      console.error(\"Error fetching miners:\", error);\n      res.status(500).json({ message: \"Failed to fetch miners\" });\n    }\n  });\n\n  app.post('/api/shop/buy', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const { minerTypeId } = req.body;\n\n      if (!minerTypeId) {\n        return res.status(400).json({ message: \"Invalid request\" });\n      }\n\n      // Get miner type\n      const minerType = await storage.getMinerType(minerTypeId);\n      if (!minerType || !minerType.isAvailable) {\n        return res.status(404).json({ message: \"Miner not found or unavailable\" });\n      }\n\n      // Check if user already owns this miner type (one per type limit)\n      const ownedMiners = await storage.getUserMiners(userId);\n      const alreadyOwns = ownedMiners.some(m => m.minerType.id === minerTypeId);\n      if (alreadyOwns) {\n        return res.status(400).json({ message: \"You already own this miner type. Each miner can only be purchased once.\" });\n      }\n\n      // Apply rarity-based discount\n      let discountPercent = 0;\n      if (minerType.rarity === \"rare\") discountPercent = 4;\n      else if (minerType.rarity === \"epic\") discountPercent = 5;\n      else if (minerType.rarity === \"legendary\") discountPercent = 7;\n      \n      const basePrice = parseFloat(minerType.basePriceMere);\n      const finalCost = basePrice * (1 - discountPercent / 100);\n\n      // Check user balance\n      const user = await storage.getUser(userId);\n      if (!user || parseFloat(user.mereBalance) < finalCost) {\n        return res.status(400).json({ message: \"Insufficient MERE balance\" });\n      }\n\n      // Deduct balance\n      await storage.updateUserBalance(userId, finalCost.toString(), \"subtract\");\n\n      // Create user miner (only one)\n      await storage.createUserMiner({\n        userId,\n        minerTypeId,\n        slotPosition: null,\n        isActive: true,\n        boostMultiplier: 1.0,\n      });\n\n      // Record transaction\n      const description = discountPercent > 0 \n        ? `Purchased ${minerType.name} (-${discountPercent}% ${minerType.rarity} discount)`\n        : `Purchased ${minerType.name}`;\n      \n      await storage.createTransaction({\n        userId,\n        type: \"purchase\",\n        amountMere: finalCost.toFixed(2),\n        amountUsd: (finalCost * 0.5).toFixed(2),\n        description,\n        status: \"completed\",\n        metadata: { minerTypeId, quantity: 1, discount: discountPercent, originalPrice: basePrice },\n      });\n\n      // Check and unlock achievements\n      await achievementsService.checkAndUnlockAchievements({ userId, type: \"purchase\" });\n\n      res.json({ success: true, cost: finalCost });\n    } catch (error) {\n      console.error(\"Error purchasing miner:\", error);\n      res.status(500).json({ message: \"Failed to purchase miner\" });\n    }\n  });\n\n  // Mining room routes\n  app.get('/api/mining/room', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      const miners = await storage.getUserMiners(userId);\n      res.json(miners);\n    } catch (error) {\n      console.error(\"Error fetching mining room:\", error);\n      res.status(500).json({ message: \"Failed to fetch mining room\" });\n    }\n  });\n\n  app.get('/api/mining/slots', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      const slotCount = await storage.getUserSlotCount(userId);\n      res.json({ totalSlots: 20, unlockedSlots: slotCount });\n    } catch (error) {\n      console.error(\"Error fetching slots:\", error);\n      res.status(500).json({ message: \"Failed to fetch slots\" });\n    }\n  });\n\n  app.post('/api/mining/place', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      const { minerId, slotPosition } = req.body;\n\n      if (!minerId || slotPosition === undefined) {\n        return res.status(400).json({ message: \"Invalid request\" });\n      }\n\n      // Verify ownership\n      const miner = await storage.getUserMiner(minerId);\n      if (!miner || miner.userId !== userId) {\n        return res.status(404).json({ message: \"Miner not found\" });\n      }\n\n      // Update slot position\n      await storage.updateMinerSlot(minerId, slotPosition);\n\n      // Check and unlock achievements\n      await achievementsService.checkAndUnlockAchievements({ userId, type: \"miner_placed\" });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error placing miner:\", error);\n      res.status(500).json({ message: \"Failed to place miner\" });\n    }\n  });\n\n  app.post('/api/mining/remove', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      const { minerId } = req.body;\n\n      if (!minerId) {\n        return res.status(400).json({ message: \"Invalid request\" });\n      }\n\n      // Verify ownership\n      const miner = await storage.getUserMiner(minerId);\n      if (!miner || miner.userId !== userId) {\n        return res.status(404).json({ message: \"Miner not found\" });\n      }\n\n      // Remove from slot\n      await storage.updateMinerSlot(minerId, null);\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error removing miner:\", error);\n      res.status(500).json({ message: \"Failed to remove miner\" });\n    }\n  });\n\n  app.post('/api/mining/upgrade', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      const { minerId } = req.body;\n\n      if (!minerId) {\n        return res.status(400).json({ message: \"Invalid request\" });\n      }\n\n      // Upgrade the miner\n      const result = await storage.upgradeMiner(minerId, userId);\n\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Error upgrading miner:\", error);\n      res.status(400).json({ message: error.message || \"Failed to upgrade miner\" });\n    }\n  });\n\n  app.post('/api/mining/unlock-slot', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n\n      // Check user balance\n      const user = await storage.getUser(userId);\n      if (!user || parseFloat(user.mereBalance) < SLOT_EXPANSION_PRICE_MERE) {\n        return res.status(400).json({ message: \"Insufficient MERE balance\" });\n      }\n\n      // Deduct cost\n      await storage.updateUserBalance(userId, SLOT_EXPANSION_PRICE_MERE.toString(), \"subtract\");\n\n      // Unlock slot (simplified - in production track per user)\n      const result = await storage.unlockSlot(userId);\n\n      // Record transaction\n      await storage.createTransaction({\n        userId,\n        type: \"purchase\",\n        amountMere: SLOT_EXPANSION_PRICE_MERE.toString(),\n        amountUsd: (SLOT_EXPANSION_PRICE_MERE * 0.5).toString(),\n        description: \"Unlocked mining slot\",\n        status: \"completed\",\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error unlocking slot:\", error);\n      res.status(500).json({ message: \"Failed to unlock slot\" });\n    }\n  });\n\n  // Wallet routes\n  app.get('/api/wallet/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      const transactions = await storage.getUserTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post('/api/wallet/deposit/generate', isAuthenticated, async (req: any, res) => {\n    try {\n      // In production, generate a unique TRC-20 address\n      // For demo, return a mock address\n      const mockAddress = `T${Math.random().toString(36).substring(2, 15).toUpperCase()}`;\n      res.json({ address: mockAddress });\n    } catch (error) {\n      console.error(\"Error generating deposit address:\", error);\n      res.status(500).json({ message: \"Failed to generate deposit address\" });\n    }\n  });\n\n  app.post('/api/wallet/withdraw', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      const { amountMere } = req.body;\n\n      const amount = parseFloat(amountMere);\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Invalid amount\" });\n      }\n\n      // Check balance\n      const user = await storage.getUser(userId);\n      if (!user || parseFloat(user.mereBalance) < amount) {\n        return res.status(400).json({ message: \"Insufficient balance\" });\n      }\n\n      // Calculate fee (2%)\n      const fee = amount * 0.02;\n      const total = amount - fee;\n\n      // Deduct from balance\n      await storage.updateUserBalance(userId, amount.toString(), \"subtract\");\n\n      // Record transaction\n      await storage.createTransaction({\n        userId,\n        type: \"withdrawal\",\n        amountMere: amount.toString(),\n        amountUsd: (total * 0.5).toString(),\n        description: `Withdrawal (Fee: ${fee.toFixed(2)} MERE)`,\n        status: \"pending\",\n      });\n\n      res.json({ success: true, amount: total });\n    } catch (error) {\n      console.error(\"Error processing withdrawal:\", error);\n      res.status(500).json({ message: \"Failed to process withdrawal\" });\n    }\n  });\n\n  app.post('/api/wallet/convert', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      const { fromCurrency, toCurrency, amount } = req.body;\n\n      const convertAmount = parseFloat(amount);\n      if (!convertAmount || convertAmount <= 0) {\n        return res.status(400).json({ message: \"Invalid amount\" });\n      }\n\n      // Get user balance\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(400).json({ message: \"User not found\" });\n      }\n\n      let convertedAmount = 0;\n      let description = \"\";\n\n      if (fromCurrency === \"MERE\" && toCurrency === \"USDT\") {\n        // Convert MERE to USDT (1 MERE = 0.5 USDT)\n        if (parseFloat(user.mereBalance) < convertAmount) {\n          return res.status(400).json({ message: \"Insufficient MERE balance\" });\n        }\n        convertedAmount = convertAmount * 0.5;\n        description = `Converted ${convertAmount} MERE to ${convertedAmount.toFixed(2)} USDT`;\n        \n        // Actually deduct MERE and add USDT\n        await db.transaction(async (tx) => {\n          // Deduct MERE (with balance check to prevent negative balance)\n          const result = await tx\n            .update(users)\n            .set({\n              mereBalance: sql`${users.mereBalance} - ${convertAmount}`,\n              updatedAt: new Date(),\n            })\n            .where(and(\n              eq(users.id, userId),\n              sql`${users.mereBalance} >= ${convertAmount}`\n            ))\n            .returning();\n          \n          if (result.length === 0) {\n            throw new Error(\"Insufficient MERE balance\");\n          }\n          \n          // Add USDT\n          await tx\n            .update(users)\n            .set({\n              usdtBalance: sql`${users.usdtBalance} + ${convertedAmount}`,\n              updatedAt: new Date(),\n            })\n            .where(eq(users.id, userId));\n        });\n      } else if (fromCurrency === \"USDT\" && toCurrency === \"MERE\") {\n        // Convert USDT to MERE (1 USDT = 2 MERE)\n        if (parseFloat(user.usdtBalance) < convertAmount) {\n          return res.status(400).json({ message: \"Insufficient USDT balance\" });\n        }\n        convertedAmount = convertAmount * 2;\n        description = `Converted ${convertAmount} USDT to ${convertedAmount.toFixed(2)} MERE`;\n        \n        // Actually deduct USDT and add MERE\n        await db.transaction(async (tx) => {\n          // Deduct USDT (with balance check to prevent negative balance)\n          const result = await tx\n            .update(users)\n            .set({\n              usdtBalance: sql`${users.usdtBalance} - ${convertAmount}`,\n              updatedAt: new Date(),\n            })\n            .where(and(\n              eq(users.id, userId),\n              sql`${users.usdtBalance} >= ${convertAmount}`\n            ))\n            .returning();\n          \n          if (result.length === 0) {\n            throw new Error(\"Insufficient USDT balance\");\n          }\n          \n          // Add MERE\n          await tx\n            .update(users)\n            .set({\n              mereBalance: sql`${users.mereBalance} + ${convertedAmount}`,\n              updatedAt: new Date(),\n            })\n            .where(eq(users.id, userId));\n        });\n      } else {\n        return res.status(400).json({ message: \"Invalid currency pair\" });\n      }\n\n      // Record transaction\n      await storage.createTransaction({\n        userId,\n        type: \"conversion\",\n        amountMere: fromCurrency === \"MERE\" ? convertAmount.toString() : convertedAmount.toString(),\n        amountUsd: fromCurrency === \"USDT\" ? convertAmount.toString() : convertedAmount.toString(),\n        description,\n        status: \"completed\",\n      });\n\n      res.json({ success: true, converted: convertedAmount });\n    } catch (error) {\n      console.error(\"Error processing conversion:\", error);\n      res.status(500).json({ message: \"Failed to process conversion\" });\n    }\n  });\n\n  // Leaderboard routes\n  app.get('/api/leaderboard', isAuthenticated, async (_req, res) => {\n    try {\n      const season = await storage.getCurrentSeason();\n      if (!season) {\n        return res.json([]);\n      }\n\n      const leaderboard = await storage.getLeaderboard(season.id, 100);\n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  app.get('/api/leaderboard/season', isAuthenticated, async (_req, res) => {\n    try {\n      const season = await storage.getCurrentSeason();\n      if (!season) {\n        return res.status(404).json({ message: \"No active season\" });\n      }\n\n      res.json({\n        id: season.id,\n        name: season.name,\n        endAt: season.endAt,\n      });\n    } catch (error) {\n      console.error(\"Error fetching season:\", error);\n      res.status(500).json({ message: \"Failed to fetch season\" });\n    }\n  });\n\n  // Season Pass routes\n  app.get('/api/season-pass', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      const season = await storage.getCurrentSeason();\n      \n      if (!season) {\n        return res.status(404).json({ message: \"No active season\" });\n      }\n\n      let userPass = await storage.getUserSeasonPass(userId, season.id);\n      if (!userPass) {\n        userPass = await storage.createUserSeasonPass(userId, season.id);\n      }\n\n      const rewards = await storage.getSeasonPassRewards(season.id);\n\n      res.json({\n        ...userPass,\n        rewards,\n        seasonName: season.name,\n      });\n    } catch (error) {\n      console.error(\"Error fetching season pass:\", error);\n      res.status(500).json({ message: \"Failed to fetch season pass\" });\n    }\n  });\n\n  app.post('/api/season-pass/upgrade', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      const upgradeCost = 999; // 999 MERE\n\n      // Check balance\n      const user = await storage.getUser(userId);\n      if (!user || parseFloat(user.mereBalance) < upgradeCost) {\n        return res.status(400).json({ message: \"Insufficient MERE balance\" });\n      }\n\n      const season = await storage.getCurrentSeason();\n      if (!season) {\n        return res.status(404).json({ message: \"No active season\" });\n      }\n\n      // Deduct cost\n      await storage.updateUserBalance(userId, upgradeCost.toString(), \"subtract\");\n\n      // Upgrade pass\n      await storage.upgradeSeasonPass(userId, season.id);\n\n      // Record transaction\n      await storage.createTransaction({\n        userId,\n        type: \"purchase\",\n        amountMere: upgradeCost.toString(),\n        amountUsd: (upgradeCost * 0.5).toString(),\n        description: \"Season Pass Premium Upgrade\",\n        status: \"completed\",\n      });\n\n      // Check and unlock achievements\n      await achievementsService.checkAndUnlockAchievements({ userId, type: \"season_pass_premium\" });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error upgrading season pass:\", error);\n      res.status(500).json({ message: \"Failed to upgrade season pass\" });\n    }\n  });\n\n  app.post('/api/season-pass/claim', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      const { rewardId } = req.body;\n\n      if (!rewardId) {\n        return res.status(400).json({ message: \"Invalid request\" });\n      }\n\n      const season = await storage.getCurrentSeason();\n      if (!season) {\n        return res.status(404).json({ message: \"No active season\" });\n      }\n\n      // Get the reward details\n      const [reward] = await db.select().from(seasonPassRewards).where(eq(seasonPassRewards.id, rewardId));\n      \n      if (!reward) {\n        return res.status(404).json({ message: \"Reward not found\" });\n      }\n\n      // Verify reward belongs to current season\n      if (reward.seasonId !== season.id) {\n        return res.status(400).json({ message: \"Reward does not belong to current season\" });\n      }\n\n      // Get user's season pass progress\n      const userPass = await storage.getUserSeasonPass(userId, season.id);\n      if (!userPass) {\n        return res.status(404).json({ message: \"Season pass not found\" });\n      }\n\n      // Check if user has reached required tier\n      if (userPass.currentTier < reward.tier) {\n        return res.status(403).json({ message: \"You haven't reached this tier yet\" });\n      }\n\n      // Check if premium reward requires premium status\n      if (reward.isPremium && !userPass.hasPremium) {\n        return res.status(403).json({ message: \"Premium pass required for this reward\" });\n      }\n\n      // Check if reward was already claimed\n      const claimedRewards = Array.isArray(userPass.claimedRewards) \n        ? (userPass.claimedRewards as string[]) \n        : [];\n      if (claimedRewards.includes(rewardId)) {\n        return res.status(400).json({ message: \"Reward already claimed\" });\n      }\n\n      // Claim reward\n      await storage.claimSeasonPassReward(userId, season.id, rewardId);\n\n      // Grant the reward based on type\n      if (reward.rewardType === \"mere\" && reward.rewardValue) {\n        // Credit MERE to user balance\n        const amount = parseFloat(reward.rewardValue);\n        await storage.updateUserBalance(userId, amount.toString(), \"add\");\n        \n        // Create transaction record\n        await storage.createTransaction({\n          userId,\n          type: \"reward\",\n          amountMere: amount.toString(),\n          description: `Season Pass Tier ${reward.tier} Reward`,\n          status: \"completed\",\n        });\n      } else if (reward.rewardType === \"booster\" && reward.rewardMetadata) {\n        // Apply hashrate booster to all active miners\n        const metadata = reward.rewardMetadata as any;\n        const boostMultiplier = metadata.multiplier || 1.0;\n        \n        await db.update(userMiners)\n          .set({ boostMultiplier: sql`${userMiners.boostMultiplier} * ${boostMultiplier}` })\n          .where(and(\n            eq(userMiners.userId, userId),\n            eq(userMiners.isActive, true)\n          ));\n      }\n      // Note: \"miner\" and \"skin\" rewards would require additional implementation\n\n      res.json({ success: true, reward });\n    } catch (error) {\n      console.error(\"Error claiming reward:\", error);\n      res.status(500).json({ message: \"Failed to claim reward\" });\n    }\n  });\n\n  // Achievements routes\n  app.get('/api/achievements', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      \n      // Get all achievements with user progress\n      const allAchievements = await db.select().from(achievements).where(eq(achievements.isActive, true));\n      const userAchievementRecords = await db.select().from(userAchievements).where(eq(userAchievements.userId, userId));\n      \n      const achievementsWithProgress = allAchievements.map(ach => {\n        const userAch = userAchievementRecords.find(ua => ua.achievementId === ach.id);\n        return {\n          ...ach,\n          progress: userAch?.progress || 0,\n          isUnlocked: userAch?.isUnlocked || false,\n          unlockedAt: userAch?.unlockedAt || null,\n        };\n      });\n\n      res.json(achievementsWithProgress);\n    } catch (error) {\n      console.error(\"Error fetching achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  // Referral routes\n  app.get('/api/referrals', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      const stats = await getReferralStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching referral stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch referral stats\" });\n    }\n  });\n\n  // Daily Games routes\n  app.get('/api/games/daily-spin/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      \n      const lastGame = await storage.getLastDailyGame(userId, 'daily_spin');\n      \n      if (!lastGame) {\n        return res.json({ \n          canPlay: true, \n          lastPlayedAt: null,\n          nextPlayAt: null \n        });\n      }\n      \n      const lastPlayedAt = new Date(lastGame.lastPlayedAt);\n      const now = new Date();\n      const nextPlayAt = new Date(lastPlayedAt);\n      nextPlayAt.setHours(24, 0, 0, 0); // Next play at midnight\n      \n      const canPlay = now >= nextPlayAt;\n      \n      res.json({\n        canPlay,\n        lastPlayedAt: lastPlayedAt.toISOString(),\n        nextPlayAt: nextPlayAt.toISOString(),\n        lastReward: lastGame.rewardMere,\n      });\n    } catch (error) {\n      console.error(\"Error checking daily spin status:\", error);\n      res.status(500).json({ message: \"Failed to check game status\" });\n    }\n  });\n\n  app.post('/api/games/daily-spin/play', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      \n      // Check if user can play\n      const lastGame = await storage.getLastDailyGame(userId, 'daily_spin');\n      \n      if (lastGame) {\n        const lastPlayedAt = new Date(lastGame.lastPlayedAt);\n        const now = new Date();\n        const nextPlayAt = new Date(lastPlayedAt);\n        nextPlayAt.setHours(24, 0, 0, 0);\n        \n        if (now < nextPlayAt) {\n          return res.status(400).json({ \n            message: \"You've already played today. Come back tomorrow!\",\n            nextPlayAt: nextPlayAt.toISOString()\n          });\n        }\n      }\n      \n      // Generate random reward (0.01-0.05 MERE)\n      const rewardMere = (0.01 + Math.random() * 0.04).toFixed(2);\n      \n      // Play the game and credit reward\n      const game = await storage.playDailyGame(userId, 'daily_spin', rewardMere);\n      \n      res.json({\n        success: true,\n        reward: rewardMere,\n        playedAt: game.lastPlayedAt,\n      });\n    } catch (error) {\n      console.error(\"Error playing daily spin:\", error);\n      res.status(500).json({ message: \"Failed to play game\" });\n    }\n  });\n\n  // Lucky Draw game routes\n  app.get('/api/games/lucky-draw/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      \n      const lastGame = await storage.getLastDailyGame(userId, 'lucky_draw');\n      const hasPlayedBefore = await storage.hasPlayedGameBefore(userId, 'lucky_draw');\n      \n      if (!lastGame) {\n        return res.json({ \n          canPlay: true, \n          lastPlayedAt: null,\n          nextPlayAt: null,\n          isFirstPlay: !hasPlayedBefore\n        });\n      }\n      \n      const lastPlayedAt = new Date(lastGame.lastPlayedAt);\n      const now = new Date();\n      const nextPlayAt = new Date(lastPlayedAt);\n      nextPlayAt.setHours(24, 0, 0, 0);\n      \n      const canPlay = now >= nextPlayAt;\n      \n      res.json({\n        canPlay,\n        lastPlayedAt: lastPlayedAt.toISOString(),\n        nextPlayAt: nextPlayAt.toISOString(),\n        lastReward: lastGame.rewardMere,\n        lastRarity: (lastGame.metadata as any)?.rarity,\n        isFirstPlay: false\n      });\n    } catch (error) {\n      console.error(\"Error checking lucky draw status:\", error);\n      res.status(500).json({ message: \"Failed to check game status\" });\n    }\n  });\n\n  app.post('/api/games/lucky-draw/play', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      \n      // Check if user can play\n      const lastGame = await storage.getLastDailyGame(userId, 'lucky_draw');\n      \n      if (lastGame) {\n        const lastPlayedAt = new Date(lastGame.lastPlayedAt);\n        const now = new Date();\n        const nextPlayAt = new Date(lastPlayedAt);\n        nextPlayAt.setHours(24, 0, 0, 0);\n        \n        if (now < nextPlayAt) {\n          return res.status(400).json({ \n            message: \"You've already played today. Come back tomorrow!\",\n            nextPlayAt: nextPlayAt.toISOString()\n          });\n        }\n      }\n      \n      // Check if first play\n      const hasPlayedBefore = await storage.hasPlayedGameBefore(userId, 'lucky_draw');\n      \n      let rewardMere: string;\n      let rarity: string;\n      \n      if (!hasPlayedBefore) {\n        // First play always gives 0.01 MERE (Common)\n        rewardMere = '0.01';\n        rarity = 'common';\n      } else {\n        // Rarity-based rewards with weighted probabilities (0.01-0.07 MERE)\n        const rand = Math.random() * 100;\n        \n        if (rand < 50) { // 50% chance - Common\n          rewardMere = (0.01 + Math.random() * 0.01).toFixed(2); // 0.01-0.02\n          rarity = 'common';\n        } else if (rand < 80) { // 30% chance - Rare\n          rewardMere = (0.02 + Math.random() * 0.02).toFixed(2); // 0.02-0.04\n          rarity = 'rare';\n        } else if (rand < 95) { // 15% chance - Epic\n          rewardMere = (0.04 + Math.random() * 0.02).toFixed(2); // 0.04-0.06\n          rarity = 'epic';\n        } else { // 5% chance - Legendary\n          rewardMere = (0.06 + Math.random() * 0.01).toFixed(2); // 0.06-0.07\n          rarity = 'legendary';\n        }\n      }\n      \n      // Play the game and credit reward\n      const game = await storage.playDailyGame(userId, 'lucky_draw', rewardMere, { rarity });\n      \n      res.json({\n        success: true,\n        reward: rewardMere,\n        rarity,\n        playedAt: game.lastPlayedAt,\n        isFirstPlay: !hasPlayedBefore\n      });\n    } catch (error) {\n      console.error(\"Error playing lucky draw:\", error);\n      res.status(500).json({ message: \"Failed to play game\" });\n    }\n  });\n\n  // Miner Match game routes\n  app.get('/api/games/miner-match/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      \n      const lastGame = await storage.getLastDailyGame(userId, 'miner_match');\n      \n      if (!lastGame) {\n        return res.json({ \n          canPlay: true, \n          lastPlayedAt: null,\n          nextPlayAt: null \n        });\n      }\n      \n      const lastPlayedAt = new Date(lastGame.lastPlayedAt);\n      const now = new Date();\n      const nextPlayAt = new Date(lastPlayedAt);\n      nextPlayAt.setHours(24, 0, 0, 0);\n      \n      const canPlay = now >= nextPlayAt;\n      \n      res.json({\n        canPlay,\n        lastPlayedAt: lastPlayedAt.toISOString(),\n        nextPlayAt: nextPlayAt.toISOString(),\n        lastReward: lastGame.rewardMere,\n        lastMoves: (lastGame.metadata as any)?.moves,\n      });\n    } catch (error) {\n      console.error(\"Error checking miner match status:\", error);\n      res.status(500).json({ message: \"Failed to check game status\" });\n    }\n  });\n\n  app.post('/api/games/miner-match/play', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = requireUserId(req, res);\n      if (!userId) return;\n      \n      // Check if user can play\n      const lastGame = await storage.getLastDailyGame(userId, 'miner_match');\n      \n      if (lastGame) {\n        const lastPlayedAt = new Date(lastGame.lastPlayedAt);\n        const now = new Date();\n        const nextPlayAt = new Date(lastPlayedAt);\n        nextPlayAt.setHours(24, 0, 0, 0);\n        \n        if (now < nextPlayAt) {\n          return res.status(400).json({ \n            message: \"You've already played today. Come back tomorrow!\",\n            nextPlayAt: nextPlayAt.toISOString()\n          });\n        }\n      }\n      \n      const { moves } = req.body;\n      \n      // Calculate reward based on moves (fewer moves = better reward)\n      // Perfect game (12 moves = 6 pairs) = 0.08 MERE\n      // Each extra move reduces reward by 0.01 MERE, minimum 0.01 MERE\n      let rewardMere: string;\n      if (moves <= 12) {\n        rewardMere = '0.08';\n      } else {\n        const extraMoves = moves - 12;\n        const penalty = extraMoves * 0.01;\n        const reward = Math.max(0.01, 0.08 - penalty);\n        rewardMere = reward.toFixed(2);\n      }\n      \n      // Play the game and credit reward\n      const game = await storage.playDailyGame(userId, 'miner_match', rewardMere, { moves });\n      \n      res.json({\n        success: true,\n        reward: rewardMere,\n        moves,\n        playedAt: game.lastPlayedAt,\n      });\n    } catch (error) {\n      console.error(\"Error playing miner match:\", error);\n      res.status(500).json({ message: \"Failed to play game\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":35031},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/MinerCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Zap, TrendingUp } from \"lucide-react\";\nimport type { MinerType } from \"@shared/schema\";\nimport { formatMERE } from \"@/lib/constants\";\n\ninterface MinerCardProps {\n  miner: MinerType;\n  onPurchase?: (miner: MinerType) => void;\n  isPurchasing?: boolean;\n  showPurchaseButton?: boolean;\n}\n\nexport function MinerCard({ miner, onPurchase, isPurchasing, showPurchaseButton = true }: MinerCardProps) {\n  const getRarityColor = (rarity: string) => {\n    switch (rarity) {\n      case \"legendary\": return \"bg-gold-gradient text-black\";\n      case \"epic\": return \"bg-purple-600 text-white\";\n      case \"rare\": return \"bg-blue-500 text-white\";\n      default: return \"bg-secondary text-secondary-foreground\";\n    }\n  };\n\n  // Calculate rarity-based discount\n  const getDiscountPercent = (rarity: string) => {\n    if (rarity === \"rare\") return 4;\n    if (rarity === \"epic\") return 5;\n    if (rarity === \"legendary\") return 7;\n    return 0;\n  };\n\n  const discountPercent = getDiscountPercent(miner.rarity);\n  const basePrice = parseFloat(miner.basePriceMere);\n  const finalPrice = discountPercent > 0 ? basePrice * (1 - discountPercent / 100) : basePrice;\n\n  const rarityBadge = (\n    <Badge className={`${getRarityColor(miner.rarity)} uppercase text-xs font-bold`}>\n      {miner.rarity}\n    </Badge>\n  );\n\n  return (\n    <Card className=\"overflow-hidden border-card-border bg-card hover-elevate transition-all duration-300 group\">\n      <div className=\"relative aspect-square bg-gradient-to-br from-background to-accent/20 p-6\">\n        {rarityBadge && (\n          <div className=\"absolute top-3 left-3 z-10\">\n            {rarityBadge}\n          </div>\n        )}\n        <img\n          src={miner.imageUrl}\n          alt={miner.name}\n          className=\"w-full h-full object-contain group-hover:scale-110 transition-transform duration-500\"\n          data-testid={`img-miner-${miner.id}`}\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n      </div>\n      \n      <div className=\"p-4 space-y-3\">\n        <div>\n          <h3 className=\"font-display font-bold text-lg text-foreground\" data-testid={`text-miner-name-${miner.id}`}>\n            {miner.name}\n          </h3>\n          {miner.description && (\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {miner.description}\n            </p>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-3\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Zap className=\"w-4 h-4 text-primary\" />\n            <div>\n              <div className=\"text-xs text-muted-foreground\">Hash Rate</div>\n              <div className=\"font-semibold text-foreground\">{miner.thRate} TH/s</div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2 text-sm\">\n            <TrendingUp className=\"w-4 h-4 text-primary\" />\n            <div>\n              <div className=\"text-xs text-muted-foreground\">Daily Yield</div>\n              <div className=\"font-semibold text-primary\">\n                {formatMERE(miner.dailyYieldMere)}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"pt-2 border-t border-border\">\n          <div className=\"flex items-baseline justify-between mb-3\">\n            <div className=\"flex-1\">\n              {discountPercent > 0 ? (\n                <>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"text-lg font-display font-bold text-muted-foreground line-through\">\n                      {formatMERE(miner.basePriceMere)}\n                    </div>\n                    <Badge className=\"bg-primary text-primary-foreground text-xs\">\n                      -{discountPercent}%\n                    </Badge>\n                  </div>\n                  <div className=\"text-2xl font-display font-bold bg-gold-gradient bg-clip-text text-transparent\">\n                    {formatMERE(finalPrice.toFixed(2))}\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div className=\"text-2xl font-display font-bold bg-gold-gradient bg-clip-text text-transparent\">\n                    {formatMERE(miner.basePriceMere)}\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n\n          {showPurchaseButton && onPurchase && (\n            <Button\n              onClick={() => onPurchase(miner)}\n              disabled={isPurchasing || !miner.isAvailable}\n              className=\"w-full\"\n              size=\"lg\"\n              data-testid={`button-buy-miner-${miner.id}`}\n            >\n              {isPurchasing ? \"Processing...\" : miner.isAvailable ? \"Buy Now\" : \"Sold Out\"}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":5056},"replit.md":{"content":"# MereMiners - Premium Crypto Mining Game\n\n## Overview\nMereMiners is a premium mobile-first crypto mining game PWA featuring a luxury black & gold aesthetic. Users acquire 3D miners, place them in a visual slot grid to generate passive MERE token income, and compete on seasonal leaderboards. The project aims to deliver an engaging simulation experience with a sophisticated design and robust economic model.\n\n## User Preferences\nI prefer detailed explanations.\nI want iterative development.\nAsk before making major changes.\nDo not make changes to the `server/setAdmin.ts` file.\n\n## System Architecture\n\n### UI/UX Decisions\nThe game features a luxury black & gold theme with a primary gold color `#D4AF37` and a background black `#0B0B0D`. Typography uses Poppins for display and Inter for body text, with JetBrains Mono for addresses. Animations include pulse glows, float effects for miners, sparkle effects, and smooth hover elevations to enhance user interaction. The design system leverages shadcn/ui components for a consistent and modern look.\n\n### Technical Implementations\n- **Frontend:** React + TypeScript, Vite, TailwindCSS (with custom theme), Wouter for routing, TanStack Query v5 for state management.\n- **Backend:** Express.js, Node.js with TypeScript.\n- **Database:** PostgreSQL (Neon) with Drizzle ORM for type-safe database interactions.\n- **Authentication:** Replit Auth (OIDC) integrated for secure user management and session handling.\n- **Core Features:**\n    - **Authentication:** Replit Auth OIDC, auto-profile creation with referral codes.\n    - **Mining Room:** Visual slot grid (6-20 slots), drag-and-place miners, real-time stats (Hashrate, Daily Earnings), miner upgrades (unlimited levels, flat 25.98 MERE/$12.99 USD per level, cosmetic only).\n    - **Shop System:** 10 unique miner types, each purchasable only once per type (one-time purchase limit), rarity-based discounts (Rare: -4%, Epic: -5%, Legendary: -7%).\n    - **Wallet:** MERE token balance, mock USDT deposit, withdrawal system with fees, transaction history.\n    - **Leaderboard (Ranks):** Seasonal rankings based on MERE mined, top 3 podium, season countdown.\n    - **Season Pass:** Free and Premium tracks with 20 tiers, claimable rewards, progress based on mining. Premium Pass costs 999 MERE, rewards 1,290 MERE (30% profit) plus 10 TH/s total hashrate boosts.\n    - **Mini-Games:** Three daily mini-games playable once per 24 hours:\n        - **Daily Spin:** Spinning wheel with randomized rewards (0.01-0.05 MERE), animated wheel, countdown timer.\n        - **Lucky Draw:** Rarity-based gem rewards (0.01-0.07 MERE), first play guaranteed 0.01 MERE, weighted probabilities (50% Common: 0.01-0.02, 30% Rare: 0.02-0.04, 15% Epic: 0.04-0.06, 5% Legendary: 0.06-0.07), rarity-specific colors.\n        - **Miner Match:** Memory card matching game with 6 pairs, performance-based rewards (0.08 MERE for perfect game, decreasing by 0.01 per extra move, min 0.01 MERE), move tracking.\n    - **Profile:** User stats, shareable referral codes (10% bonus), achievement system, referral statistics.\n    - **Real-Time Earnings Engine:** Background worker for automatic MERE crediting and leaderboard updates.\n    - **Achievement System:** 10 achievements with MERE rewards, real-time progress, auto-crediting.\n    - **Referral Rewards System:** Unique referral codes, 10% bonus on referee earnings, detailed stats tracking.\n    - **Admin Panel:** Access control, system stats, user management (promote/demote admin), miner type management, season management.\n\n### System Design Choices\nThe project is structured into `client/`, `server/`, and `shared/` directories. `shared/` contains Drizzle schema definitions and shared constants, promoting code reusability and consistency. The system prioritizes mobile-first design and PWA capabilities. Database schema includes tables for users, miner types, user miners, transactions, seasons, leaderboard entries, season pass data, achievements, daily games, and sessions, all managed through Drizzle ORM.\n\n## External Dependencies\n- **Replit:** Hosting, OIDC authentication, and database auto-provisioning.\n- **Neon:** Managed PostgreSQL database service.\n- **Lucide React:** Icon library.\n- **Google Fonts:** For Poppins, Inter, and JetBrains Mono fonts.","size_bytes":4287},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  integer,\n  jsonb,\n  numeric,\n  pgTable,\n  timestamp,\n  varchar,\n  boolean,\n  real,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (supports both Replit Auth and email/password)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  passwordHash: varchar(\"password_hash\"), // For email/password auth (null for Replit Auth users)\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  mereBalance: numeric(\"mere_balance\", { precision: 20, scale: 8 }).notNull().default(\"0\"),\n  usdtBalance: numeric(\"usdt_balance\", { precision: 20, scale: 8 }).notNull().default(\"0\"),\n  totalMined: numeric(\"total_mined\", { precision: 20, scale: 8 }).notNull().default(\"0\"),\n  referralCode: varchar(\"referral_code\").unique(),\n  referredById: varchar(\"referred_by_id\").references((): any => users.id), // Who invited this user\n  totalReferrals: integer(\"total_referrals\").notNull().default(0), // Count of successful referrals\n  totalReferralEarnings: numeric(\"total_referral_earnings\", { precision: 20, scale: 8 }).notNull().default(\"0\"), // Total MERE earned from referrals\n  isAdmin: boolean(\"is_admin\").notNull().default(false), // Admin access flag\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Miner types/models available in the shop\nexport const minerTypes = pgTable(\"miner_types\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: varchar(\"description\"),\n  imageUrl: varchar(\"image_url\").notNull(),\n  thRate: real(\"th_rate\").notNull(), // TH/s (hash rate)\n  basePriceUsd: numeric(\"base_price_usd\", { precision: 10, scale: 2 }).notNull(),\n  basePriceMere: numeric(\"base_price_mere\", { precision: 10, scale: 2 }).notNull(),\n  dailyYieldUsd: numeric(\"daily_yield_usd\", { precision: 10, scale: 2 }).notNull(),\n  dailyYieldMere: numeric(\"daily_yield_mere\", { precision: 10, scale: 2 }).notNull(),\n  roiDays: integer(\"roi_days\").notNull(),\n  rarity: varchar(\"rarity\").notNull().default(\"common\"), // common, rare, epic, legendary\n  isAvailable: boolean(\"is_available\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertMinerTypeSchema = createInsertSchema(minerTypes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertMinerType = z.infer<typeof insertMinerTypeSchema>;\nexport type MinerType = typeof minerTypes.$inferSelect;\n\n// User-owned miners\nexport const userMiners = pgTable(\"user_miners\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  minerTypeId: varchar(\"miner_type_id\").notNull().references(() => minerTypes.id),\n  slotPosition: integer(\"slot_position\"), // null if not placed in mining room\n  upgradeLevel: integer(\"upgrade_level\").notNull().default(0), // 0-5, each level adds 20% hashrate\n  purchasedAt: timestamp(\"purchased_at\").defaultNow(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  boostMultiplier: real(\"boost_multiplier\").notNull().default(1.0),\n  lastEarningsUpdate: timestamp(\"last_earnings_update\").defaultNow(),\n});\n\nexport const userMinersRelations = relations(userMiners, ({ one }) => ({\n  user: one(users, {\n    fields: [userMiners.userId],\n    references: [users.id],\n  }),\n  minerType: one(minerTypes, {\n    fields: [userMiners.minerTypeId],\n    references: [minerTypes.id],\n  }),\n}));\n\nexport const insertUserMinerSchema = createInsertSchema(userMiners).omit({\n  id: true,\n  purchasedAt: true,\n  lastEarningsUpdate: true,\n});\n\nexport type InsertUserMiner = z.infer<typeof insertUserMinerSchema>;\nexport type UserMiner = typeof userMiners.$inferSelect;\n\n// Transaction history\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  type: varchar(\"type\").notNull(), // deposit, withdrawal, purchase, earnings, reward\n  amountMere: numeric(\"amount_mere\", { precision: 20, scale: 8 }).notNull(),\n  amountUsd: numeric(\"amount_usd\", { precision: 20, scale: 2 }),\n  description: varchar(\"description\"),\n  status: varchar(\"status\").notNull().default(\"completed\"), // pending, completed, failed\n  txHash: varchar(\"tx_hash\"), // For blockchain transactions\n  metadata: jsonb(\"metadata\"), // Store additional data like miner_id, etc\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  user: one(users, {\n    fields: [transactions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\n\n// Seasons for leaderboard\nexport const seasons = pgTable(\"seasons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  startAt: timestamp(\"start_at\").notNull(),\n  endAt: timestamp(\"end_at\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertSeasonSchema = createInsertSchema(seasons).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertSeason = z.infer<typeof insertSeasonSchema>;\nexport type Season = typeof seasons.$inferSelect;\n\n// Leaderboard entries\nexport const leaderboardEntries = pgTable(\"leaderboard_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  seasonId: varchar(\"season_id\").notNull().references(() => seasons.id, { onDelete: \"cascade\" }),\n  totalMined: numeric(\"total_mined\", { precision: 20, scale: 8 }).notNull().default(\"0\"),\n  totalHashrate: real(\"total_hashrate\").notNull().default(0),\n  rank: integer(\"rank\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const leaderboardEntriesRelations = relations(leaderboardEntries, ({ one }) => ({\n  user: one(users, {\n    fields: [leaderboardEntries.userId],\n    references: [users.id],\n  }),\n  season: one(seasons, {\n    fields: [leaderboardEntries.seasonId],\n    references: [seasons.id],\n  }),\n}));\n\nexport const insertLeaderboardEntrySchema = createInsertSchema(leaderboardEntries).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type InsertLeaderboardEntry = z.infer<typeof insertLeaderboardEntrySchema>;\nexport type LeaderboardEntry = typeof leaderboardEntries.$inferSelect;\n\n// Season pass rewards\nexport const seasonPassRewards = pgTable(\"season_pass_rewards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  seasonId: varchar(\"season_id\").notNull().references(() => seasons.id, { onDelete: \"cascade\" }),\n  tier: integer(\"tier\").notNull(), // 0-based index\n  isPremium: boolean(\"is_premium\").notNull().default(false),\n  rewardType: varchar(\"reward_type\").notNull(), // mere, miner, booster, skin\n  rewardValue: numeric(\"reward_value\", { precision: 20, scale: 8 }),\n  rewardMetadata: jsonb(\"reward_metadata\"), // Store additional reward data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const seasonPassRewardsRelations = relations(seasonPassRewards, ({ one }) => ({\n  season: one(seasons, {\n    fields: [seasonPassRewards.seasonId],\n    references: [seasons.id],\n  }),\n}));\n\nexport type SeasonPassReward = typeof seasonPassRewards.$inferSelect;\n\n// User season pass progress\nexport const userSeasonPass = pgTable(\"user_season_pass\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  seasonId: varchar(\"season_id\").notNull().references(() => seasons.id, { onDelete: \"cascade\" }),\n  currentTier: integer(\"current_tier\").notNull().default(0),\n  hasPremium: boolean(\"has_premium\").notNull().default(false),\n  claimedRewards: jsonb(\"claimed_rewards\").notNull().default(\"[]\"), // Array of reward IDs\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const userSeasonPassRelations = relations(userSeasonPass, ({ one }) => ({\n  user: one(users, {\n    fields: [userSeasonPass.userId],\n    references: [users.id],\n  }),\n  season: one(seasons, {\n    fields: [userSeasonPass.seasonId],\n    references: [seasons.id],\n  }),\n}));\n\nexport type UserSeasonPass = typeof userSeasonPass.$inferSelect;\n\n// Achievements\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: varchar(\"description\").notNull(),\n  icon: varchar(\"icon\").notNull(), // Icon name from lucide-react\n  category: varchar(\"category\").notNull(), // mining, shop, social, special\n  criteria: jsonb(\"criteria\").notNull(), // { type: \"first_purchase\", value: 1 }\n  rewardMere: numeric(\"reward_mere\", { precision: 10, scale: 2 }),\n  tier: varchar(\"tier\").notNull().default(\"bronze\"), // bronze, silver, gold, platinum\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const achievementsRelations = relations(achievements, ({ many }) => ({\n  userAchievements: many(userAchievements),\n}));\n\nexport type Achievement = typeof achievements.$inferSelect;\n\n// User achievements (unlocked achievements)\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  achievementId: varchar(\"achievement_id\").notNull().references(() => achievements.id, { onDelete: \"cascade\" }),\n  progress: real(\"progress\").notNull().default(0), // Current progress towards achievement (can be decimal for total_mined, hashrate, etc.)\n  isUnlocked: boolean(\"is_unlocked\").notNull().default(false),\n  unlockedAt: timestamp(\"unlocked_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userAchievementsRelations = relations(userAchievements, ({ one }) => ({\n  user: one(users, {\n    fields: [userAchievements.userId],\n    references: [users.id],\n  }),\n  achievement: one(achievements, {\n    fields: [userAchievements.achievementId],\n    references: [achievements.id],\n  }),\n}));\n\nexport const insertUserAchievementSchema = createInsertSchema(userAchievements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUserAchievement = z.infer<typeof insertUserAchievementSchema>;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\n\n// Daily Games (mini-games playable once per day)\nexport const dailyGames = pgTable(\"daily_games\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  gameType: varchar(\"game_type\").notNull(), // \"daily_spin\", \"lucky_draw\", \"miner_match\", etc.\n  lastPlayedAt: timestamp(\"last_played_at\").notNull(),\n  rewardMere: numeric(\"reward_mere\", { precision: 10, scale: 2 }).notNull(),\n  metadata: jsonb(\"metadata\"), // Additional game-specific data (rarity, score, etc.)\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const dailyGamesRelations = relations(dailyGames, ({ one }) => ({\n  user: one(users, {\n    fields: [dailyGames.userId],\n    references: [users.id],\n  }),\n}));\n\nexport type DailyGame = typeof dailyGames.$inferSelect;\n","size_bytes":12243},"shared/constants.ts":{"content":"// Shared constants for MereMiners - used by both frontend and backend\n\n// Economic constants\nexport const MERE_TO_USD_RATE = 0.5; // 1 MERE = $0.50 USD\nexport const TH_BASE_PRICE_MERE = 27.98; // Base price per 1 TH/s in MERE\nexport const TH_DAILY_YIELD_MERE = 0.16; // Daily yield per 1 TH/s in MERE\nexport const DEFAULT_SLOTS = 6; // Default number of mining slots\nexport const SLOT_EXPANSION_PRICE_MERE = 50; // Cost to unlock one additional slot\nexport const REFERRAL_BONUS_PERCENT = 10; // Referrer earns 10% of referee's mining earnings\n\n// Formatting helpers\nexport function formatMERE(amount: number | string): string {\n  const num = typeof amount === \"string\" ? parseFloat(amount) : amount;\n  return `${num.toFixed(2)} MERE`;\n}\n\nexport function formatUSD(amount: number | string): string {\n  const num = typeof amount === \"string\" ? parseFloat(amount) : amount;\n  return `$${num.toFixed(2)}`;\n}\n\n// Conversion helpers\nexport function mereToUSD(mere: number | string): number {\n  const num = typeof mere === \"string\" ? parseFloat(mere) : mere;\n  return num * MERE_TO_USD_RATE;\n}\n\nexport function usdToMERE(usd: number | string): number {\n  const num = typeof usd === \"string\" ? parseFloat(usd) : usd;\n  return num / MERE_TO_USD_RATE;\n}\n\n// Bulk discount calculation\n// Formula: Discount = min(20%, 5% × log₁₀(TH + 1))\nexport function calculateDiscountedPrice(totalTH: number): {\n  originalPrice: number;\n  discount: number;\n  discountPercent: number;\n  finalPrice: number;\n} {\n  const originalPrice = totalTH * TH_BASE_PRICE_MERE;\n  const discountPercent = Math.min(20, 5 * Math.log10(totalTH + 1));\n  const discount = originalPrice * (discountPercent / 100);\n  const finalPrice = originalPrice - discount;\n\n  return {\n    originalPrice,\n    discount,\n    discountPercent,\n    finalPrice,\n  };\n}\n","size_bytes":1810},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport SignUp from \"@/pages/SignUp\";\nimport SignIn from \"@/pages/SignIn\";\nimport MiningRoom from \"@/pages/MiningRoom\";\nimport Shop from \"@/pages/Shop\";\nimport Wallet from \"@/pages/Wallet\";\nimport Leaderboard from \"@/pages/Leaderboard\";\nimport SeasonPass from \"@/pages/SeasonPass\";\nimport Profile from \"@/pages/Profile\";\nimport Games from \"@/pages/Games\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n          <div className=\"text-primary font-semibold\">Loading MereMiners...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/signup\" component={SignUp} />\n          <Route path=\"/signin\" component={SignIn} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={MiningRoom} />\n          <Route path=\"/shop\" component={Shop} />\n          <Route path=\"/wallet\" component={Wallet} />\n          <Route path=\"/leaderboard\" component={Leaderboard} />\n          <Route path=\"/season-pass\" component={SeasonPass} />\n          <Route path=\"/games\" component={Games} />\n          <Route path=\"/profile\" component={Profile} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2157},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"server/earnings.ts":{"content":"import { db } from \"./db\";\nimport { users, userMiners, transactions, leaderboardEntries, minerTypes } from \"@shared/schema\";\nimport { eq, and, isNotNull, sql } from \"drizzle-orm\";\nimport { TH_DAILY_YIELD_MERE } from \"@shared/constants\";\nimport { creditReferralBonus } from \"./referralService\";\n\nexport class EarningsEngine {\n  private intervalId: NodeJS.Timeout | null = null;\n  private isRunning = false;\n  private isCalculating = false;\n\n  start() {\n    if (this.isRunning) {\n      console.log(\"Earnings engine already running\");\n      return;\n    }\n\n    console.log(\"🚀 Starting earnings engine...\");\n    this.isRunning = true;\n\n    this.calculateEarnings();\n\n    this.intervalId = setInterval(() => {\n      this.calculateEarnings();\n    }, 60 * 1000); // Run every minute\n\n    console.log(\"✅ Earnings engine started\");\n  }\n\n  stop() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    this.isRunning = false;\n    console.log(\"⏹️ Earnings engine stopped\");\n  }\n\n  async calculateEarnings() {\n    // Prevent overlapping calculations\n    if (this.isCalculating) {\n      console.log(\"⏭️ Skipping earnings calculation - previous run still in progress\");\n      return;\n    }\n\n    this.isCalculating = true;\n\n    try {\n      console.log(`[${new Date().toISOString()}] Calculating earnings...`);\n\n      const activeMinersList = await db\n        .select({\n          userId: userMiners.userId,\n          minerId: userMiners.id,\n          thRate: minerTypes.thRate,\n          boostMultiplier: userMiners.boostMultiplier,\n          upgradeLevel: userMiners.upgradeLevel,\n          lastUpdate: userMiners.lastEarningsUpdate,\n        })\n        .from(userMiners)\n        .innerJoin(minerTypes, eq(userMiners.minerTypeId, minerTypes.id))\n        .where(\n          and(\n            isNotNull(userMiners.slotPosition),\n            eq(userMiners.isActive, true)\n          )\n        );\n\n      if (activeMinersList.length === 0) {\n        console.log(\"No active miners found\");\n        return;\n      }\n\n      // Group miners by user and calculate total earnings per user\n      const userMinersMap = new Map<string, Array<{ minerId: string; earnings: number; minutesSince: number }>>();\n      const now = new Date();\n\n      for (const miner of activeMinersList) {\n        const lastUpdate = miner.lastUpdate || new Date(Date.now() - 60000);\n        const minutesSinceUpdate = (now.getTime() - lastUpdate.getTime()) / (1000 * 60);\n        \n        // Upgrades are cosmetic only - no performance bonus\n        const dailyEarnings = TH_DAILY_YIELD_MERE * miner.thRate * (miner.boostMultiplier || 1.0);\n        const earningsPerMinute = dailyEarnings / (24 * 60);\n        const earnings = earningsPerMinute * minutesSinceUpdate;\n\n        if (earnings > 0) {\n          if (!userMinersMap.has(miner.userId)) {\n            userMinersMap.set(miner.userId, []);\n          }\n          userMinersMap.get(miner.userId)!.push({\n            minerId: miner.minerId,\n            earnings,\n            minutesSince: minutesSinceUpdate,\n          });\n        }\n      }\n\n      // Process each user's earnings in a single atomic transaction\n      for (const [userId, minersList] of Array.from(userMinersMap.entries())) {\n        const totalEarnings = minersList.reduce((sum, m) => sum + m.earnings, 0);\n        \n        if (totalEarnings <= 0) continue;\n\n        const roundedEarnings = Math.floor(totalEarnings * 100000000) / 100000000;\n\n        try {\n          await db.transaction(async (tx) => {\n            // Update user balance and total mined\n            await tx\n              .update(users)\n              .set({\n                mereBalance: sql`${users.mereBalance} + ${roundedEarnings}`,\n                totalMined: sql`${users.totalMined} + ${roundedEarnings}`,\n                updatedAt: now,\n              })\n              .where(eq(users.id, userId));\n\n            // Create daily transaction record (only one per day)\n            const today = new Date();\n            today.setHours(0, 0, 0, 0);\n            \n            const todayTransaction = await tx.query.transactions.findFirst({\n              where: (txns, { and, eq, gte }) =>\n                and(\n                  eq(txns.userId, userId),\n                  eq(txns.type, \"earnings\"),\n                  gte(txns.createdAt, today)\n                ),\n            });\n\n            if (todayTransaction) {\n              // Update existing daily transaction\n              await tx\n                .update(transactions)\n                .set({\n                  amountMere: sql`${transactions.amountMere} + ${roundedEarnings}`,\n                  amountUsd: sql`${transactions.amountUsd} + ${roundedEarnings * 0.5}`,\n                })\n                .where(eq(transactions.id, todayTransaction.id));\n            } else {\n              // Create new daily transaction\n              await tx.insert(transactions).values({\n                userId,\n                type: \"earnings\",\n                amountMere: roundedEarnings.toString(),\n                amountUsd: (roundedEarnings * 0.5).toFixed(2),\n                description: \"Daily mining earnings\",\n                status: \"completed\",\n              });\n            }\n\n            // Update leaderboard\n            const activeSeasons = await tx.query.seasons.findFirst({\n              where: (seasons, { eq }) => eq(seasons.isActive, true),\n            });\n\n            if (activeSeasons) {\n              const entry = await tx.query.leaderboardEntries.findFirst({\n                where: (entries, { and, eq }) =>\n                  and(\n                    eq(entries.userId, userId),\n                    eq(entries.seasonId, activeSeasons.id)\n                  ),\n              });\n\n              if (entry) {\n                await tx\n                  .update(leaderboardEntries)\n                  .set({\n                    totalMined: sql`${leaderboardEntries.totalMined} + ${roundedEarnings}`,\n                    updatedAt: now,\n                  })\n                  .where(eq(leaderboardEntries.id, entry.id));\n              } else {\n                await tx.insert(leaderboardEntries).values({\n                  userId,\n                  seasonId: activeSeasons.id,\n                  totalMined: roundedEarnings.toString(),\n                  totalHashrate: 0,\n                });\n              }\n            }\n\n            // CRITICAL: Only update lastEarningsUpdate after ALL other operations succeed\n            // This ensures atomicity - if transaction fails, miners won't lose their accrued earnings\n            for (const miner of minersList) {\n              await tx\n                .update(userMiners)\n                .set({ lastEarningsUpdate: now })\n                .where(eq(userMiners.id, miner.minerId));\n            }\n          });\n\n          console.log(`💰 Credited ${roundedEarnings.toFixed(8)} MERE to user ${userId}`);\n\n          // Credit referral bonus to referrer (if applicable)\n          await creditReferralBonus(userId, roundedEarnings);\n        } catch (error) {\n          console.error(`❌ Failed to credit earnings for user ${userId}:`, error);\n          // If transaction fails, lastEarningsUpdate is NOT updated, so earnings will be retried next cycle\n        }\n      }\n\n      console.log(`✅ Earnings calculated for ${userMinersMap.size} users`);\n    } catch (error) {\n      console.error(\"❌ Error calculating earnings:\", error);\n    } finally {\n      // Always release the lock, even if an error occurred\n      this.isCalculating = false;\n    }\n  }\n}\n\nexport const earningsEngine = new EarningsEngine();\n","size_bytes":7604},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"server/achievementsService.ts":{"content":"import { db } from \"./db\";\nimport { users, userMiners, achievements, userAchievements, transactions, userSeasonPass } from \"@shared/schema\";\nimport { eq, and, sql, count } from \"drizzle-orm\";\n\ninterface AchievementCheckContext {\n  userId: string;\n  type: string;\n  value?: number;\n}\n\nexport class AchievementsService {\n  async checkAndUnlockAchievements(context: AchievementCheckContext) {\n    const { userId, type } = context;\n\n    // Get all active achievements that haven't been unlocked yet\n    const allAchievements = await db\n      .select()\n      .from(achievements)\n      .where(eq(achievements.isActive, true));\n\n    // Get user's current achievement progress\n    const userAchievementRecords = await db\n      .select()\n      .from(userAchievements)\n      .where(eq(userAchievements.userId, userId));\n\n    const userAchievementsMap = new Map(\n      userAchievementRecords.map((ua) => [ua.achievementId, ua])\n    );\n\n    // Calculate current stats for the user\n    const stats = await this.getUserStats(userId);\n\n    const newlyUnlocked: string[] = [];\n\n    for (const achievement of allAchievements) {\n      const userAchievement = userAchievementsMap.get(achievement.id);\n      \n      // Skip if already unlocked\n      if (userAchievement?.isUnlocked) continue;\n\n      const criteria = achievement.criteria as { type: string; value: number };\n      \n      // Check if achievement criteria is met\n      const progress = this.getProgressForCriteria(criteria.type, stats);\n      const isUnlocked = progress >= criteria.value;\n\n      if (userAchievement) {\n        // Update existing record\n        if (progress !== userAchievement.progress || isUnlocked) {\n          await db\n            .update(userAchievements)\n            .set({\n              progress,\n              isUnlocked,\n              unlockedAt: isUnlocked ? new Date() : userAchievement.unlockedAt,\n            })\n            .where(eq(userAchievements.id, userAchievement.id));\n\n          if (isUnlocked && !userAchievement.isUnlocked) {\n            newlyUnlocked.push(achievement.id);\n            await this.awardAchievement(userId, achievement);\n          }\n        }\n      } else {\n        // Create new achievement tracking record\n        await db.insert(userAchievements).values({\n          userId,\n          achievementId: achievement.id,\n          progress,\n          isUnlocked,\n          unlockedAt: isUnlocked ? new Date() : null,\n        });\n\n        if (isUnlocked) {\n          newlyUnlocked.push(achievement.id);\n          await this.awardAchievement(userId, achievement);\n        }\n      }\n    }\n\n    return {\n      checked: allAchievements.length,\n      newlyUnlocked: newlyUnlocked.length,\n      achievementIds: newlyUnlocked,\n    };\n  }\n\n  private async getUserStats(userId: string) {\n    // Get user data\n    const user = await db.query.users.findFirst({\n      where: (users, { eq }) => eq(users.id, userId),\n    });\n\n    // Count total miners owned\n    const [minersCountResult] = await db\n      .select({ count: count() })\n      .from(userMiners)\n      .where(and(\n        eq(userMiners.userId, userId),\n        eq(userMiners.isActive, true)\n      ));\n\n    const totalMinersOwned = minersCountResult?.count || 0;\n\n    // Count miners placed in slots\n    const [placedMinersResult] = await db\n      .select({ count: count() })\n      .from(userMiners)\n      .where(and(\n        eq(userMiners.userId, userId),\n        eq(userMiners.isActive, true),\n        sql`${userMiners.slotPosition} IS NOT NULL`\n      ));\n\n    const minersPlaced = placedMinersResult?.count || 0;\n\n    // Calculate total hashrate\n    const placedMiners = await db.query.userMiners.findMany({\n      where: (userMiners, { and, eq, isNotNull }) => and(\n        eq(userMiners.userId, userId),\n        eq(userMiners.isActive, true),\n        isNotNull(userMiners.slotPosition)\n      ),\n      with: {\n        minerType: true,\n      },\n    });\n\n    const totalHashrate = placedMiners.reduce((sum, miner) => {\n      return sum + (miner.minerType.thRate * (miner.boostMultiplier || 1.0));\n    }, 0);\n\n    // Count total purchases (transactions of type \"purchase\")\n    const [purchasesResult] = await db\n      .select({ count: count() })\n      .from(transactions)\n      .where(and(\n        eq(transactions.userId, userId),\n        eq(transactions.type, \"purchase\")\n      ));\n\n    const totalPurchases = purchasesResult?.count || 0;\n\n    // Check premium pass status\n    const seasonPass = await db.query.userSeasonPass.findFirst({\n      where: (pass, { eq }) => eq(pass.userId, userId),\n    });\n\n    const hasPremiumPass = seasonPass?.hasPremium ? 1 : 0;\n\n    // Track successful referrals (users who were referred by this user)\n    const [referralsResult] = await db\n      .select({ count: count() })\n      .from(users)\n      .where(eq(users.referredById, userId));\n    \n    const successfulReferrals = referralsResult?.count || 0;\n\n    return {\n      totalMined: parseFloat(user?.totalMined || \"0\"),\n      totalMinersOwned,\n      minersPlaced,\n      slotsFilledCount: minersPlaced,\n      totalHashrate,\n      totalPurchases,\n      hasPremiumPass,\n      successfulReferrals,\n    };\n  }\n\n  private getProgressForCriteria(type: string, stats: any): number {\n    switch (type) {\n      case \"total_purchases\":\n        return stats.totalPurchases;\n      case \"total_miners_owned\":\n        return stats.totalMinersOwned;\n      case \"miners_placed\":\n        return stats.minersPlaced;\n      case \"slots_filled\":\n        return stats.slotsFilledCount;\n      case \"total_hashrate\":\n        return Math.floor(stats.totalHashrate);\n      case \"total_mined\":\n        return stats.totalMined;\n      case \"season_pass_premium\":\n        return stats.hasPremiumPass;\n      case \"successful_referrals\":\n        return stats.successfulReferrals;\n      default:\n        return 0;\n    }\n  }\n\n  private async awardAchievement(userId: string, achievement: any) {\n    const rewardAmount = parseFloat(achievement.rewardMere || \"0\");\n    \n    if (rewardAmount > 0) {\n      await db.transaction(async (tx) => {\n        // Credit MERE reward\n        await tx\n          .update(users)\n          .set({\n            mereBalance: sql`${users.mereBalance} + ${rewardAmount}`,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.id, userId));\n\n        // Create transaction record\n        await tx.insert(transactions).values({\n          userId,\n          type: \"reward\",\n          amountMere: rewardAmount.toString(),\n          amountUsd: (rewardAmount * 0.5).toFixed(2),\n          description: `Achievement unlocked: ${achievement.name}`,\n          status: \"completed\",\n          metadata: { achievementId: achievement.id },\n        });\n      });\n\n      console.log(`🏆 Achievement unlocked for user ${userId}: ${achievement.name} (${rewardAmount} MERE reward)`);\n    }\n  }\n}\n\nexport const achievementsService = new AchievementsService();\n","size_bytes":6883},"design_guidelines.md":{"content":"# MereMiners Design Guidelines\n\n## Design Approach\n**Premium Mobile-First Luxury Gaming**: Inspired by high-end mobile games like Clash Royale's polish combined with crypto wallet apps' trustworthy aesthetics (Metamask, Trust Wallet). Reference the tactile, toy-like quality of games like Monument Valley 2 and the premium black/gold aesthetic of luxury brand apps.\n\n## Core Design Principles\n1. **Black Gold Luxury**: Deep matte blacks with strategic gold accents create premium feel without gaudiness\n2. **Toy-Like Playfulness**: 3D soft miners contrast with sophisticated UI for approachable luxury\n3. **Clarity First**: Financial data and earnings must be instantly readable despite rich visuals\n4. **Delight Through Motion**: Smooth spring animations and particle effects enhance engagement\n\n## Color System\n\n### Primary Palette\n- **Deep Black Base**: `#0B0B0D` (primary background)\n- **Elevated Black**: `#111111` (cards, elevated surfaces)\n- **Secondary Dark**: `#1A1A1D` (tertiary elevation)\n\n### Gold Accent System\n- **Primary Gold**: `#D4AF37` (main accent, CTAs, highlights)\n- **Light Gold**: `#FFD86B` (gradients start, hover states)\n- **Warm Orange**: `#FF9F1C` (gradients end, earnings highlights)\n- **Neon Gold**: `#FFA500` (active miners, live indicators)\n\n### Functional Colors\n- **Success Green**: `#10B981` (confirmations, positive earnings)\n- **Warning Amber**: `#F59E0B` (alerts, limited items)\n- **Error Red**: `#EF4444` (errors, critical actions)\n- **Info Blue**: `#3B82F6` (neutral information)\n\n### Surface Hierarchy\n- Level 1 (deepest): `#0B0B0D`\n- Level 2 (cards): `#111111` with subtle `#D4AF37` border glow\n- Level 3 (nested elements): `#1A1A1D`\n- Glass effect: `rgba(212, 175, 55, 0.05)` backdrop with blur\n\n## Typography\n\n### Font Families\n- **Primary**: Inter or Poppins (body text, UI elements)\n- **Display**: Montserrat or similar geometric (headings, numbers)\n- **Monospace**: JetBrains Mono (wallet addresses, transaction IDs)\n\n### Type Scale\n- **Hero Display**: 48px bold (onboarding headers)\n- **H1**: 32px bold (screen titles)\n- **H2**: 24px semibold (section headers)\n- **H3**: 20px semibold (card titles)\n- **Body Large**: 16px regular (primary content)\n- **Body**: 14px regular (secondary content)\n- **Caption**: 12px medium (labels, metadata)\n- **Tiny**: 10px medium (timestamps, fine print)\n\n### Number Display (Critical)\n- **Large Earnings**: 36px bold with gold gradient fill\n- **Currency Values**: 20px semibold, always show USD and MERE equivalents\n- **Stats**: 18px medium with unit labels in 12px\n\n## Layout System\n\n### Spacing Primitives\nUse Tailwind spacing: `2, 3, 4, 6, 8, 12, 16, 20, 24` (as in `p-4`, `gap-6`, `mt-8`)\n- Tight spacing: 2-4 units (within components)\n- Standard spacing: 6-8 units (between sections)\n- Generous spacing: 12-20 units (major sections)\n- Extra spacing: 24+ units (screen padding)\n\n### Screen Structure\n```\nMobile Layout:\n- Screen padding: px-4 sm:px-6\n- Vertical spacing: py-6 sm:py-8\n- Section gaps: gap-6 sm:gap-8\n- Card padding: p-4 sm:p-6\n```\n\n### Grid System\n- Mining Room: 2-column grid on mobile, 3-4 columns on tablet+\n- Shop Cards: 2-column on mobile, 3-column on tablet, 4-column desktop\n- Leaderboard: Single column stacked cards\n- Stats Display: 2x2 grid for key metrics\n\n## Component Library\n\n### Cards\n- **Base**: Rounded corners (16px), subtle gold border glow\n- **Shadow**: Multi-layer shadow for depth (black with gold rim light)\n- **Padding**: 16-24px depending on content density\n- **Hover**: Lift effect (translate-y -4px) with increased glow\n\n### Buttons\n- **Primary CTA**: Gold gradient background (#FFD86B → #FF9F1C), black text, bold, 48px height on mobile\n- **Secondary**: Black with gold border, gold text\n- **Tertiary**: Transparent with gold text, subtle gold underline on hover\n- **Disabled**: Gray with 40% opacity\n- **Icon Buttons**: 44px circular, gold border, centered icon\n\n### Input Fields\n- **Background**: `#1A1A1D` with subtle inner shadow\n- **Border**: 1px gold at 20% opacity, full gold on focus\n- **Height**: 52px for better mobile touch targets\n- **Label**: Floating label pattern, 12px gold when focused\n- **Error State**: Red border with error message below\n\n### Progress Bars\n- **Track**: Dark gray `#1A1A1D`\n- **Fill**: Gold gradient with animated shine effect\n- **Height**: 8px (standard), 12px (prominent)\n- **Rounded**: Full border radius\n\n### Modals/Overlays\n- **Backdrop**: Black at 80% opacity with blur\n- **Container**: Elevated card style with gold accent border\n- **Animation**: Slide up from bottom with spring physics\n- **Close Button**: Top-right, white/gold X icon\n\n### Navigation\n- **Bottom Tab Bar**: Black background, 5 icons, gold fill for active state\n- **Tab Height**: 64px for comfortable tapping\n- **Icons**: 24px, simple line icons\n- **Labels**: 10px, always visible\n\n## Mining Room Visualization\n\n### Slot Design\n- **Empty Slot**: Dashed gold border, subtle pulse animation, \"+ Add Miner\" centered\n- **Occupied Slot**: 3D miner model, glass card background, live stats overlay\n- **Size**: 160x180px on mobile, 200x240px on tablet+\n- **Spacing**: 12px gap between slots\n\n### Miner Models (3D Style)\n- **Appearance**: Toy-like, rounded edges, metallic sheen\n- **Animation Loop**: Gentle rotation or breathing effect\n- **Skin Variations**: Metal, matte black, neon gold, holographic\n- **Particle Effects**: Gold sparks emanating during active mining\n- **Status Indicator**: Small pulsing dot (green=active, amber=cooldown)\n\n### Stats Overlay on Miners\n- **TH/s Display**: Top-right badge, 14px bold\n- **Daily Earnings**: Bottom overlay, gold text with $ and MERE\n- **Progress Bar**: Mining progress as circular ring around miner\n\n## Shop/Marketplace\n\n### Product Cards\n- **Layout**: Image top (3D miner render), details below\n- **Price Display**: Large MERE price, small USD equivalent underneath\n- **Discount Badge**: Top-left corner, gold background, red \"X% OFF\"\n- **CTA Button**: Full width at bottom, \"Buy Now\" or \"Purchase\"\n- **ROI Indicator**: \"ROI: ~175 days\" with small clock icon\n\n### Bulk Purchase UI\n- **Slider**: Gold track, large thumb, shows discount % in real-time\n- **Calculation Display**: Shows original price, discount, final price dynamically\n- **Visual Feedback**: Confetti animation on purchase completion\n\n## Wallet Screen\n\n### Balance Display\n- **Hero Section**: Large MERE balance with gold gradient text\n- **USD Equivalent**: Below in smaller gray text\n- **Action Buttons**: \"Deposit\" (gold) and \"Withdraw\" side-by-side\n\n### Transaction History\n- **List Items**: Icon left, details center, amount right\n- **Icons**: Color-coded (green deposit, red withdraw, gold purchase)\n- **Timestamp**: Small gray text below transaction type\n- **Status**: Badge indicating pending/completed/failed\n\n### Deposit Flow\n- **QR Code**: Large centered, black border, gold corner accents\n- **Address**: Below QR, copyable with gold copy button\n- **Instructions**: Step-by-step numbered list\n- **Confirmation Tracker**: Shows required confirmations (e.g., \"2/6 confirmations\")\n\n## Leaderboard\n\n### Rank Cards\n- **Top 3**: Special gold/silver/bronze gradient backgrounds, larger size\n- **Regular Ranks**: Black cards with rank number in gold circle\n- **User Info**: Avatar left, name and stats center, score right\n- **Current User**: Highlight with subtle gold glow\n- **Season Indicator**: Header showing current season and countdown timer\n\n## Season Pass\n\n### Track Visualization\n- **Layout**: Horizontal scrollable track showing rewards\n- **Nodes**: Circular checkpoints, unlocked (gold) vs locked (gray)\n- **Rewards**: Small preview image with item name\n- **Progress Bar**: Shows current level progress between nodes\n- **Premium Lane**: Separated by subtle divider, gold accents\n\n## Mini-Games\n\n### Game UI Elements\n- **Score Display**: Top-center, large animated numbers\n- **Timer**: Top-right, countdown with color change when low\n- **Controls**: Bottom-center, large touch-friendly buttons\n- **Results Modal**: Shows score, rewards earned, leaderboard position\n\n## Animations & Microinteractions\n\n### Key Animations\n- **Purchase Success**: Particle burst, scale bounce, checkmark appear\n- **Earnings Count-Up**: Numbers increment smoothly with easing\n- **Miner Placement**: Slide-in from bottom, settle with bounce\n- **Navigation**: Page transitions with slide (200ms cubic-bezier)\n- **Loading States**: Shimmer effect on skeleton screens\n\n### Timing\n- Quick actions: 150-200ms\n- Standard transitions: 300ms\n- Emphasis moments: 500ms (purchases, rewards)\n- Spring physics: tension=300, friction=20\n\n## Images & Assets\n\n### Hero Sections\n- **Onboarding**: Full-screen gradient background (black to dark gold) with floating 3D miner models\n- **Dashboard**: Mining room background - dark industrial aesthetic with subtle grid pattern, rim lighting\n\n### Icon Requirements\n- App Icon: Black background with large gold \"M\" emblem, metallic finish\n- Miner Types: 5 distinct 3D toy-like miner models (different sizes/colors)\n- UI Icons: Line-style 24px icons for navigation, actions, stats (from Heroicons or similar)\n\n### Decorative Elements\n- Particle effects: Small gold dots/sparks for earnings animations\n- Background patterns: Subtle hex grids, circuit board textures at 5% opacity\n- Glow effects: Radial gradients for depth and focus\n\n## Responsive Breakpoints\n- Mobile: 0-640px (primary target)\n- Tablet: 641-1024px (optimized)\n- Desktop: 1025px+ (supported but not primary focus)\n\n## Accessibility\n- Touch targets: Minimum 44x44px\n- Contrast: Ensure gold text on black meets WCAG AA (adjust brightness if needed)\n- Focus states: Visible gold outline on keyboard navigation\n- Screen reader: Proper ARIA labels for all interactive elements\n\n## Sound Design (Optional Toggle)\n- Purchase: Metallic chime (250ms)\n- Earnings: Soft coin drop (150ms)\n- Mining Room: Subtle ambient hum (loopable)\n- Navigation: Gentle tap sound (100ms)","size_bytes":9889},"client/src/pages/MiningRoom.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MiningSlot } from \"@/components/MiningSlot\";\nimport { BottomNav } from \"@/components/BottomNav\";\nimport { Wallet, Zap, TrendingUp, Clock, Plus } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { formatMERE, formatUSD, mereToUSD, TH_DAILY_YIELD_MERE, DEFAULT_SLOTS, SLOT_EXPANSION_PRICE_MERE } from \"@/lib/constants\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { UserMiner, MinerType } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { MinerCard } from \"@/components/MinerCard\";\n\nexport default function MiningRoom() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [showMinerSelector, setShowMinerSelector] = useState(false);\n  const [selectedSlot, setSelectedSlot] = useState<number | null>(null);\n\n  // Fetch user's miners\n  const { data: userMiners = [], isLoading: isLoadingMiners } = useQuery<(UserMiner & { minerType: MinerType })[]>({\n    queryKey: [\"/api/mining/room\"],\n  });\n\n  // Fetch available slots info\n  const { data: slotsInfo } = useQuery<{ totalSlots: number; unlockedSlots: number }>({\n    queryKey: [\"/api/mining/slots\"],\n  });\n\n  const totalSlots = slotsInfo?.unlockedSlots || DEFAULT_SLOTS;\n\n  // Get placed miners\n  const placedMiners = userMiners.filter(m => m.slotPosition !== null);\n  const unplacedMiners = userMiners.filter(m => m.slotPosition === null);\n\n  // Calculate total stats (including upgrade multipliers)\n  const totalHashrate = placedMiners.reduce((sum, m) => {\n    const upgradeMultiplier = 1.0 + (m.upgradeLevel * 0.2);\n    return sum + m.minerType.thRate * m.boostMultiplier * upgradeMultiplier;\n  }, 0);\n  const totalDailyEarnings = totalHashrate * TH_DAILY_YIELD_MERE;\n\n  // Place miner mutation\n  const placeMinerMutation = useMutation({\n    mutationFn: async ({ minerId, slotPosition }: { minerId: string; slotPosition: number }) => {\n      await apiRequest(\"POST\", \"/api/mining/place\", { minerId, slotPosition });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mining/room\"] });\n      setShowMinerSelector(false);\n      setSelectedSlot(null);\n      toast({\n        title: \"Miner Placed\",\n        description: \"Your miner is now actively mining MERE!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove miner mutation\n  const removeMinerMutation = useMutation({\n    mutationFn: async (minerId: string) => {\n      await apiRequest(\"POST\", \"/api/mining/remove\", { minerId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mining/room\"] });\n      toast({\n        title: \"Miner Removed\",\n        description: \"Miner removed from mining room\",\n      });\n    },\n  });\n\n  // Upgrade miner mutation\n  const upgradeMinerMutation = useMutation<{ newLevel: number; cost: number }, Error, string>({\n    mutationFn: async (minerId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/mining/upgrade\", { minerId });\n      return response as unknown as { newLevel: number; cost: number };\n    },\n    onSuccess: (data: { newLevel: number; cost: number }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mining/room\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Miner Upgraded!\",\n        description: `Upgraded to level ${data.newLevel} for ${data.cost} MERE`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Upgrade Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Unlock slot mutation\n  const unlockSlotMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/mining/unlock-slot\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mining/slots\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Slot Unlocked\",\n        description: \"New mining slot is now available!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddMinerToSlot = (slotNumber: number) => {\n    if (unplacedMiners.length === 0) {\n      toast({\n        title: \"No Miners Available\",\n        description: \"Buy miners from the shop first!\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setSelectedSlot(slotNumber);\n    setShowMinerSelector(true);\n  };\n\n  const handleSelectMiner = (miner: UserMiner & { minerType: MinerType }) => {\n    if (selectedSlot !== null) {\n      placeMinerMutation.mutate({\n        minerId: miner.id,\n        slotPosition: selectedSlot,\n      });\n    }\n  };\n\n  const getMinerInSlot = (slotNumber: number) => {\n    return placedMiners.find(m => m.slotPosition === slotNumber);\n  };\n\n  if (isLoadingMiners) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-pulse text-primary\">Loading mining room...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background via-background to-accent/5 pb-20\">\n      {/* Header Stats */}\n      <div className=\"sticky top-0 z-40 bg-card/95 backdrop-blur-sm border-b border-border\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h1 className=\"font-display font-bold text-2xl bg-gold-gradient bg-clip-text text-transparent\">\n              Mining Room\n            </h1>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => window.location.href = \"/wallet\"}\n              className=\"gap-2\"\n              data-testid=\"button-wallet\"\n            >\n              <Wallet className=\"w-4 h-4\" />\n              <span className=\"font-bold text-primary\">{formatMERE(user?.mereBalance || 0)}</span>\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-3\">\n            <Card className=\"p-3 border-card-border bg-card/50\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <Zap className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-xs text-muted-foreground\">Total Hash</span>\n              </div>\n              <div className=\"font-display font-bold text-lg text-foreground\" data-testid=\"text-total-hashrate\">\n                {totalHashrate.toFixed(2)} TH/s\n              </div>\n            </Card>\n\n            <Card className=\"p-3 border-card-border bg-card/50\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <TrendingUp className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-xs text-muted-foreground\">Daily</span>\n              </div>\n              <div className=\"font-display font-bold text-lg text-primary\" data-testid=\"text-daily-earnings\">\n                {formatMERE(totalDailyEarnings)}\n              </div>\n            </Card>\n\n            <Card className=\"p-3 border-card-border bg-card/50\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <Clock className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-xs text-muted-foreground\">Active</span>\n              </div>\n              <div className=\"font-display font-bold text-lg text-foreground\" data-testid=\"text-active-miners\">\n                {placedMiners.length}/{totalSlots}\n              </div>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Mining Slots Grid */}\n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-4 mb-6\">\n          {Array.from({ length: totalSlots }).map((_, index) => {\n            const slotNumber = index + 1;\n            const miner = getMinerInSlot(slotNumber);\n            return (\n              <MiningSlot\n                key={slotNumber}\n                slotNumber={slotNumber}\n                miner={miner}\n                isEmpty={!miner}\n                onAddMiner={() => handleAddMinerToSlot(slotNumber)}\n                onRemoveMiner={(minerId) => removeMinerMutation.mutate(minerId)}\n                onUpgradeMiner={(minerId) => upgradeMinerMutation.mutate(minerId)}\n              />\n            );\n          })}\n          \n          {/* Locked slots */}\n          {Array.from({ length: Math.max(0, 3 - (totalSlots - DEFAULT_SLOTS)) }).map((_, index) => (\n            <MiningSlot\n              key={`locked-${index}`}\n              slotNumber={totalSlots + index + 1}\n              isLocked\n              onUnlock={() => unlockSlotMutation.mutate()}\n            />\n          ))}\n        </div>\n\n        {/* USDT Equivalent */}\n        <div className=\"text-center text-sm text-muted-foreground mb-6\">\n          Daily earnings: <span className=\"text-foreground font-semibold\">{mereToUSD(totalDailyEarnings).toFixed(2)} USDT</span>\n        </div>\n\n        {/* Quick Actions */}\n        {userMiners.length === 0 && (\n          <Card className=\"p-6 border-card-border bg-gradient-to-br from-card to-accent/10 text-center\">\n            <h3 className=\"font-display font-bold text-lg mb-2\">No Miners Yet</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Visit the shop to buy your first miner and start earning MERE!\n            </p>\n            <Button\n              onClick={() => window.location.href = \"/shop\"}\n              className=\"bg-gold-gradient text-black font-bold\"\n              data-testid=\"button-goto-shop\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Go to Shop\n            </Button>\n          </Card>\n        )}\n      </div>\n\n      {/* Miner Selector Dialog */}\n      <Dialog open={showMinerSelector} onOpenChange={setShowMinerSelector}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Select Miner to Place</DialogTitle>\n            <DialogDescription>\n              Choose from your available miners\n            </DialogDescription>\n          </DialogHeader>\n          \n          {unplacedMiners.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No available miners. All your miners are already placed!\n            </div>\n          ) : (\n            <div className=\"grid sm:grid-cols-2 gap-4 mt-4\">\n              {unplacedMiners.map((miner) => (\n                <div key={miner.id} className=\"cursor-pointer\" onClick={() => handleSelectMiner(miner)}>\n                  <MinerCard\n                    miner={miner.minerType}\n                    showPurchaseButton={false}\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <BottomNav />\n    </div>\n  );\n}\n","size_bytes":11339},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"1rem\", /* 16px for premium cards */\n        md: \".5rem\", /* 8px for standard elements */\n        sm: \".25rem\", /* 4px for subtle rounding */\n      },\n      colors: {\n        // Premium Black & Gold Theme for MereMiners\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(16 185 129)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        // Custom colors for MereMiners\n        gold: {\n          DEFAULT: \"#D4AF37\",\n          light: \"#FFD86B\",\n          warm: \"#FF9F1C\",\n          neon: \"#FFA500\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        display: [\"Montserrat\", \"var(--font-sans)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"shimmer\": {\n          \"0%\": { backgroundPosition: \"-1000px 0\" },\n          \"100%\": { backgroundPosition: \"1000px 0\" },\n        },\n        \"pulse-glow\": {\n          \"0%, 100%\": { opacity: \"1\" },\n          \"50%\": { opacity: \"0.5\" },\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        \"sparkle\": {\n          \"0%, 100%\": { opacity: \"0\", transform: \"scale(0)\" },\n          \"50%\": { opacity: \"1\", transform: \"scale(1)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"shimmer\": \"shimmer 2s linear infinite\",\n        \"pulse-glow\": \"pulse-glow 2s ease-in-out infinite\",\n        \"float\": \"float 3s ease-in-out infinite\",\n        \"sparkle\": \"sparkle 1.5s ease-in-out infinite\",\n      },\n      backgroundImage: {\n        'gold-gradient': 'linear-gradient(135deg, #FFD86B 0%, #D4AF37 50%, #FF9F1C 100%)',\n        'gold-shimmer': 'linear-gradient(90deg, transparent, rgba(212, 175, 55, 0.3), transparent)',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":5325},"server/referralService.ts":{"content":"import { db } from \"./db\";\nimport { users, transactions } from \"@shared/schema\";\nimport { eq, sql } from \"drizzle-orm\";\nimport { REFERRAL_BONUS_PERCENT } from \"@shared/constants\";\n\nexport async function creditReferralBonus(\n  refereeUserId: string,\n  earningsAmount: number\n): Promise<void> {\n  if (earningsAmount <= 0) return;\n\n  const referee = await db.query.users.findFirst({\n    where: eq(users.id, refereeUserId),\n  });\n\n  if (!referee || !referee.referredById) {\n    return;\n  }\n\n  const referrerId = referee.referredById;\n  \n  // Security: Prevent self-referral bonus (should never happen but double-check)\n  if (referrerId === refereeUserId) {\n    console.error(`[SECURITY] Self-referral detected: User ${refereeUserId} trying to refer themselves`);\n    return;\n  }\n\n  const bonusAmount = earningsAmount * (REFERRAL_BONUS_PERCENT / 100);\n\n  await db.transaction(async (tx) => {\n    await tx\n      .update(users)\n      .set({\n        mereBalance: sql`${users.mereBalance} + ${bonusAmount}`,\n        totalReferralEarnings: sql`${users.totalReferralEarnings} + ${bonusAmount}`,\n      })\n      .where(eq(users.id, referrerId));\n\n    await tx.insert(transactions).values({\n      userId: referrerId,\n      type: \"referral_bonus\",\n      amountMere: bonusAmount.toFixed(8),\n      description: `Referral bonus (${REFERRAL_BONUS_PERCENT}% of friend's earnings)`,\n      status: \"completed\",\n      metadata: {\n        refereeUserId,\n        refereeEarnings: earningsAmount,\n      },\n    });\n  });\n}\n\nexport async function getReferralStats(userId: string) {\n  const user = await db.query.users.findFirst({\n    where: eq(users.id, userId),\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  const referrals = await db.query.users.findMany({\n    where: eq(users.referredById, userId),\n    columns: {\n      id: true,\n      firstName: true,\n      lastName: true,\n      email: true,\n      totalMined: true,\n      createdAt: true,\n    },\n  });\n\n  const referralTransactions = await db.query.transactions.findMany({\n    where: eq(transactions.userId, userId),\n    orderBy: (transactions, { desc }) => [desc(transactions.createdAt)],\n  });\n\n  const referralBonusTransactions = referralTransactions.filter(\n    (t) => t.type === \"referral_bonus\"\n  );\n\n  return {\n    totalReferrals: user.totalReferrals || 0,\n    totalReferralEarnings: parseFloat(user.totalReferralEarnings || \"0\"),\n    referrals: referrals.map((r) => ({\n      id: r.id,\n      name: r.firstName && r.lastName ? `${r.firstName} ${r.lastName}` : r.email?.split(\"@\")[0] || \"Miner\",\n      totalMined: parseFloat(r.totalMined || \"0\"),\n      joinedAt: r.createdAt,\n    })),\n    recentBonuses: referralBonusTransactions.slice(0, 10).map((t) => ({\n      id: t.id,\n      amount: parseFloat(t.amountMere || \"0\"),\n      description: t.description,\n      createdAt: t.createdAt,\n    })),\n  };\n}\n","size_bytes":2832},"client/src/pages/SignIn.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nconst signInSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype SignInForm = z.infer<typeof signInSchema>;\n\nexport default function SignIn() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<SignInForm>({\n    resolver: zodResolver(signInSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: SignInForm) => {\n    setIsLoading(true);\n    try {\n      await apiRequest(\"POST\", \"/api/auth/signin\", data);\n      \n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully signed in\",\n      });\n      \n      // Refresh user data\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      // Redirect to mining room\n      window.location.href = \"/\";\n    } catch (error: any) {\n      toast({\n        title: \"Sign in failed\",\n        description: error.message || \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background via-background to-accent/10 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-3xl font-display font-bold\">\n            <span className=\"bg-gold-gradient bg-clip-text text-transparent\">\n              Welcome Back\n            </span>\n          </CardTitle>\n          <CardDescription>\n            Sign in to your MereMiners account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => window.location.href = \"/api/login\"}\n              data-testid=\"button-google-signin\"\n            >\n              <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\n                <path\n                  fill=\"currentColor\"\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                />\n              </svg>\n              Continue with Google\n            </Button>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-card px-2 text-muted-foreground\">\n                  Or continue with email\n                </span>\n              </div>\n            </div>\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} data-testid=\"input-password\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-gold-gradient text-black font-bold\"\n                  disabled={isLoading}\n                  data-testid=\"button-signin\"\n                >\n                  {isLoading ? \"Signing In...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n          </div>\n        </CardContent>\n        <CardFooter className=\"flex flex-col gap-4\">\n          <div className=\"text-sm text-muted-foreground text-center\">\n            Don't have an account?{\" \"}\n            <Link href=\"/signup\">\n              <span className=\"text-primary hover:underline cursor-pointer font-semibold\">\n                Sign Up\n              </span>\n            </Link>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6165},"server/emailAuth.ts":{"content":"import { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\nimport { nanoid } from \"nanoid\";\nimport type { Request, Response } from \"express\";\n\nconst SALT_ROUNDS = 10;\n\n// Generate unique referral code\nfunction generateReferralCode(): string {\n  return `MERE${nanoid(6).toUpperCase()}`;\n}\n\nexport async function signUp(\n  email: string,\n  password: string,\n  referralCode?: string\n) {\n  // Validate inputs\n  if (!email || !password) {\n    throw new Error(\"Email and password are required\");\n  }\n\n  if (password.length < 8) {\n    throw new Error(\"Password must be at least 8 characters long\");\n  }\n\n  // Check if user already exists\n  const existing = await db.select().from(users).where(eq(users.email, email)).limit(1);\n  \n  if (existing.length > 0) {\n    throw new Error(\"Email already registered\");\n  }\n\n  // Hash password\n  const passwordHash = await bcrypt.hash(password, SALT_ROUNDS);\n\n  // Handle referral\n  let referredById: string | null = null;\n  if (referralCode) {\n    const referrer = await db.select().from(users).where(eq(users.referralCode, referralCode)).limit(1);\n    if (referrer.length > 0) {\n      referredById = referrer[0].id;\n    }\n  }\n\n  // Create user\n  const newUser = await db.insert(users).values({\n    email,\n    passwordHash,\n    referralCode: generateReferralCode(),\n    referredById,\n  }).returning();\n\n  // Update referrer's count if applicable\n  if (referredById) {\n    const [referrer] = await db.select().from(users).where(eq(users.id, referredById)).limit(1);\n    if (referrer) {\n      await db\n        .update(users)\n        .set({ totalReferrals: referrer.totalReferrals + 1 })\n        .where(eq(users.id, referredById));\n    }\n  }\n\n  return newUser[0];\n}\n\nexport async function signIn(email: string, password: string) {\n  // Validate inputs\n  if (!email || !password) {\n    throw new Error(\"Email and password are required\");\n  }\n\n  // Find user\n  const [user] = await db.select().from(users).where(eq(users.email, email)).limit(1);\n  \n  if (!user) {\n    throw new Error(\"Invalid email or password\");\n  }\n\n  // Check if user has password (Replit Auth users don't)\n  if (!user.passwordHash) {\n    throw new Error(\"This account uses Replit Auth. Please log in with Replit.\");\n  }\n\n  // Verify password\n  const isValid = await bcrypt.compare(password, user.passwordHash);\n  \n  if (!isValid) {\n    throw new Error(\"Invalid email or password\");\n  }\n\n  return user;\n}\n\n// Helper to get user ID from either session or Replit Auth\nexport function getUserId(req: Request): string | null {\n  if (req.session?.userId) {\n    return req.session.userId;\n  }\n  if (req.user?.claims?.sub) {\n    return req.user.claims.sub;\n  }\n  return null;\n}\n\n// Helper that returns userId or sends 401 and returns undefined\nexport function requireUserId(req: Request, res: Response): string | undefined {\n  const userId = getUserId(req);\n  if (!userId) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return undefined;\n  }\n  return userId;\n}\n","size_bytes":3036},"server/addNewMiners.ts":{"content":"// Add new miners to existing database\nimport { db } from \"./db\";\nimport { minerTypes } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nasync function addNewMiners() {\n  console.log(\"Adding new miners...\");\n\n  // Check which miners already exist\n  const existing = await db.select().from(minerTypes);\n  const existingNames = existing.map(m => m.name);\n\n  const newMiners = [\n    {\n      name: \"Prism Miner\",\n      description: \"Crystalline structure for optimal heat dispersion\",\n      imageUrl: \"/attached_assets/generated_images/Gold_accent_mining_rig_f7e3dcd1.png\",\n      thRate: 3.5,\n      basePriceUsd: \"48.98\",\n      basePriceMere: \"97.96\",\n      dailyYieldUsd: \"0.28\",\n      dailyYieldMere: \"0.56\",\n      roiDays: 175,\n      rarity: \"common\",\n      isAvailable: true,\n    },\n    {\n      name: \"Helix Miner\",\n      description: \"Spiral architecture with dual-core processing\",\n      imageUrl: \"/attached_assets/generated_images/Gold_tower_miner_8d6aee5b.png\",\n      thRate: 7.5,\n      basePriceUsd: \"104.93\",\n      basePriceMere: \"209.86\",\n      dailyYieldUsd: \"0.60\",\n      dailyYieldMere: \"1.20\",\n      roiDays: 175,\n      rarity: \"rare\",\n      isAvailable: true,\n    },\n    {\n      name: \"Nexus Reactor\",\n      description: \"Energy-efficient reactor core with quantum acceleration\",\n      imageUrl: \"/attached_assets/generated_images/Gold_sphere_miner_f2c342a6.png\",\n      thRate: 15.0,\n      basePriceUsd: \"209.85\",\n      basePriceMere: \"419.70\",\n      dailyYieldUsd: \"1.20\",\n      dailyYieldMere: \"2.40\",\n      roiDays: 175,\n      rarity: \"epic\",\n      isAvailable: true,\n    },\n    {\n      name: \"Omega Core\",\n      description: \"Military-grade processing with triple redundancy\",\n      imageUrl: \"/attached_assets/generated_images/Gold_box_miner_35ba3735.png\",\n      thRate: 20.0,\n      basePriceUsd: \"279.80\",\n      basePriceMere: \"559.60\",\n      dailyYieldUsd: \"1.60\",\n      dailyYieldMere: \"3.20\",\n      roiDays: 175,\n      rarity: \"epic\",\n      isAvailable: true,\n    },\n    {\n      name: \"Titan Fortress\",\n      description: \"Ultimate mining powerhouse with AI optimization\",\n      imageUrl: \"/attached_assets/generated_images/Gold_pyramid_elite_miner_e9c12d5d.png\",\n      thRate: 50.0,\n      basePriceUsd: \"699.50\",\n      basePriceMere: \"1399.00\",\n      dailyYieldUsd: \"4.00\",\n      dailyYieldMere: \"8.00\",\n      roiDays: 175,\n      rarity: \"legendary\",\n      isAvailable: true,\n    },\n  ];\n\n  const minersToAdd = newMiners.filter(m => !existingNames.includes(m.name));\n\n  if (minersToAdd.length > 0) {\n    await db.insert(minerTypes).values(minersToAdd);\n    console.log(`✓ Added ${minersToAdd.length} new miners`);\n  } else {\n    console.log(\"All miners already exist!\");\n  }\n}\n\naddNewMiners().catch((error) => {\n  console.error(\"Error adding miners:\", error);\n  process.exit(1);\n});\n","size_bytes":2817},"server/setAdmin.ts":{"content":"// Utility script to set a user as admin\n// Usage: npx tsx server/setAdmin.ts <email>\nimport { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nasync function setAdmin() {\n  const email = process.argv[2];\n  \n  if (!email) {\n    console.error(\"Usage: npx tsx server/setAdmin.ts <email>\");\n    process.exit(1);\n  }\n\n  console.log(`Setting admin status for user: ${email}`);\n  \n  const user = await db.select().from(users).where(eq(users.email, email)).limit(1);\n  \n  if (user.length === 0) {\n    console.error(`User with email ${email} not found!`);\n    console.log(\"Please log in first to create your user account.\");\n    process.exit(1);\n  }\n\n  await db.update(users)\n    .set({ isAdmin: true })\n    .where(eq(users.email, email));\n\n  console.log(`✅ User ${email} is now an admin!`);\n  process.exit(0);\n}\n\nsetAdmin().catch(console.error);\n","size_bytes":885},"client/src/pages/SignUp.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nconst signUpSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  repeatPassword: z.string().min(1, \"Please confirm your password\"),\n  referralCode: z.string().optional(),\n}).refine((data) => data.password === data.repeatPassword, {\n  message: \"Passwords don't match\",\n  path: [\"repeatPassword\"],\n});\n\ntype SignUpForm = z.infer<typeof signUpSchema>;\n\nexport default function SignUp() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<SignUpForm>({\n    resolver: zodResolver(signUpSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      repeatPassword: \"\",\n      referralCode: \"\",\n    },\n  });\n\n  const onSubmit = async (data: SignUpForm) => {\n    setIsLoading(true);\n    try {\n      const { repeatPassword, ...signupData } = data;\n      await apiRequest(\"POST\", \"/api/auth/signup\", signupData);\n      \n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to MereMiners\",\n      });\n      \n      // Refresh user data\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      // Redirect to mining room\n      window.location.href = \"/\";\n    } catch (error: any) {\n      toast({\n        title: \"Sign up failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background via-background to-accent/10 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-3xl font-display font-bold\">\n            <span className=\"bg-gold-gradient bg-clip-text text-transparent\">\n              Join MereMiners\n            </span>\n          </CardTitle>\n          <CardDescription>\n            Create your account and start mining MERE\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => window.location.href = \"/api/login\"}\n              data-testid=\"button-google-signup\"\n            >\n              <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\n                <path\n                  fill=\"currentColor\"\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                />\n              </svg>\n              Continue with Google\n            </Button>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-card px-2 text-muted-foreground\">\n                  Or continue with email\n                </span>\n              </div>\n            </div>\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} data-testid=\"input-password\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"repeatPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Repeat Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} data-testid=\"input-repeat-password\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"referralCode\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Referral Code (Optional)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"MERE123456\" {...field} data-testid=\"input-referral\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-gold-gradient text-black font-bold\"\n                  disabled={isLoading}\n                  data-testid=\"button-signup\"\n                >\n                  {isLoading ? \"Creating Account...\" : \"Sign Up\"}\n                </Button>\n              </form>\n            </Form>\n          </div>\n        </CardContent>\n        <CardFooter className=\"flex flex-col gap-4\">\n          <div className=\"text-sm text-muted-foreground text-center\">\n            Already have an account?{\" \"}\n            <Link href=\"/signin\">\n              <span className=\"text-primary hover:underline cursor-pointer font-semibold\">\n                Sign In\n              </span>\n            </Link>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7641},"client/src/pages/Games.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Loader2, Trophy, Sparkles, Gift, Gem, Grid3x3 } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { BottomNav } from \"@/components/BottomNav\";\n\ninterface GameStatus {\n  canPlay: boolean;\n  lastPlayedAt: string | null;\n  nextPlayAt: string | null;\n  lastReward?: string;\n  lastRarity?: string;\n  isFirstPlay?: boolean;\n}\n\ninterface Card {\n  id: number;\n  minerType: string;\n  flipped: boolean;\n  matched: boolean;\n}\n\nconst rarityColors = {\n  common: \"from-gray-400 to-gray-500\",\n  rare: \"from-blue-400 to-blue-600\",\n  epic: \"from-purple-400 to-purple-600\",\n  legendary: \"from-yellow-400 to-yellow-600\",\n};\n\nconst rarityText = {\n  common: \"text-gray-400\",\n  rare: \"text-blue-400\",\n  epic: \"text-purple-400\",\n  legendary: \"text-yellow-400\",\n};\n\nexport default function Games() {\n  const { toast } = useToast();\n  \n  // Daily Spin state\n  const [spinning, setSpinning] = useState(false);\n  const [showSpinReward, setShowSpinReward] = useState(false);\n  const [spinRewardAmount, setSpinRewardAmount] = useState<string | null>(null);\n  const [spinTimeLeft, setSpinTimeLeft] = useState<string>(\"\");\n\n  // Lucky Draw state\n  const [drawing, setDrawing] = useState(false);\n  const [showDrawReward, setShowDrawReward] = useState(false);\n  const [drawRewardAmount, setDrawRewardAmount] = useState<string | null>(null);\n  const [drawRarity, setDrawRarity] = useState<string | null>(null);\n  const [drawTimeLeft, setDrawTimeLeft] = useState<string>(\"\");\n\n  // Miner Match state\n  const [matchCards, setMatchCards] = useState<Card[]>([]);\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\n  const [matchedPairs, setMatchedPairs] = useState<number>(0);\n  const [matchMoves, setMatchMoves] = useState<number>(0);\n  const [matchGameActive, setMatchGameActive] = useState(false);\n  const [matchTimeLeft, setMatchTimeLeft] = useState<string>(\"\");\n\n  // Queries\n  const { data: spinStatus, isLoading: spinLoading } = useQuery<GameStatus>({\n    queryKey: [\"/api/games/daily-spin/status\"],\n  });\n\n  const { data: drawStatus, isLoading: drawLoading } = useQuery<GameStatus>({\n    queryKey: [\"/api/games/lucky-draw/status\"],\n  });\n\n  const { data: matchStatus, isLoading: matchLoading } = useQuery<GameStatus>({\n    queryKey: [\"/api/games/miner-match/status\"],\n  });\n\n  // Mutations\n  const spinMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/games/daily-spin/play\", {});\n    },\n    onSuccess: (data: any) => {\n      setSpinRewardAmount(data.reward);\n      setShowSpinReward(true);\n      \n      toast({\n        title: \"🎉 Congratulations!\",\n        description: `You won ${data.reward} MERE!`,\n      });\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/games/daily-spin/status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to play game\",\n      });\n    },\n  });\n\n  const drawMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/games/lucky-draw/play\", {});\n    },\n    onSuccess: (data: any) => {\n      setDrawRewardAmount(data.reward);\n      setDrawRarity(data.rarity);\n      setShowDrawReward(true);\n      \n      const rarityLabel = data.rarity.charAt(0).toUpperCase() + data.rarity.slice(1);\n      \n      toast({\n        title: `✨ ${rarityLabel} Gem!`,\n        description: `You won ${data.reward} MERE!`,\n      });\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/games/lucky-draw/status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to play game\",\n      });\n    },\n  });\n\n  const matchMutation = useMutation({\n    mutationFn: async (moves: number) => {\n      return await apiRequest(\"POST\", \"/api/games/miner-match/play\", { moves });\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"🎉 Game Complete!\",\n        description: `You won ${data.reward} MERE in ${matchMoves} moves!`,\n      });\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/games/miner-match/status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to complete game\",\n      });\n    },\n  });\n\n  // Handlers\n  const handleSpin = async () => {\n    if (spinning || spinMutation.isPending) return;\n    \n    setSpinning(true);\n    setShowSpinReward(false);\n    \n    setTimeout(async () => {\n      try {\n        await spinMutation.mutateAsync();\n      } catch (error) {\n        // Error already handled\n      } finally {\n        setSpinning(false);\n      }\n    }, 2000);\n  };\n\n  const handleDraw = async () => {\n    if (drawing || drawMutation.isPending) return;\n    \n    setDrawing(true);\n    setShowDrawReward(false);\n    \n    setTimeout(async () => {\n      try {\n        await drawMutation.mutateAsync();\n      } catch (error) {\n        // Error already handled\n      } finally {\n        setDrawing(false);\n      }\n    }, 2000);\n  };\n\n  const initMatchGame = () => {\n    const minerTypes = [\"CPU\", \"GPU\", \"ASIC\", \"FPGA\", \"Cloud\", \"Quantum\"];\n    const cardPairs = [...minerTypes, ...minerTypes];\n    const shuffled = cardPairs.sort(() => Math.random() - 0.5);\n    \n    setMatchCards(\n      shuffled.map((type, idx) => ({\n        id: idx,\n        minerType: type,\n        flipped: false,\n        matched: false,\n      }))\n    );\n    setFlippedCards([]);\n    setMatchedPairs(0);\n    setMatchMoves(0);\n    setMatchGameActive(true);\n  };\n\n  const handleCardClick = (cardId: number) => {\n    if (!matchGameActive || flippedCards.length >= 2) return;\n    if (matchCards[cardId].flipped || matchCards[cardId].matched) return;\n    \n    const newFlipped = [...flippedCards, cardId];\n    setFlippedCards(newFlipped);\n    \n    const newCards = [...matchCards];\n    newCards[cardId].flipped = true;\n    setMatchCards(newCards);\n    \n    if (newFlipped.length === 2) {\n      setMatchMoves(matchMoves + 1);\n      \n      const [first, second] = newFlipped;\n      if (matchCards[first].minerType === matchCards[second].minerType) {\n        // Match found\n        setTimeout(() => {\n          const updatedCards = [...matchCards];\n          updatedCards[first].matched = true;\n          updatedCards[second].matched = true;\n          setMatchCards(updatedCards);\n          setFlippedCards([]);\n          \n          const newMatchedPairs = matchedPairs + 1;\n          setMatchedPairs(newMatchedPairs);\n          \n          // Check if game complete\n          if (newMatchedPairs === 6) {\n            setMatchGameActive(false);\n            matchMutation.mutate(matchMoves + 1);\n          }\n        }, 500);\n      } else {\n        // No match\n        setTimeout(() => {\n          const updatedCards = [...matchCards];\n          updatedCards[first].flipped = false;\n          updatedCards[second].flipped = false;\n          setMatchCards(updatedCards);\n          setFlippedCards([]);\n        }, 1000);\n      }\n    }\n  };\n\n  // Countdown timers\n  useEffect(() => {\n    if (!spinStatus?.nextPlayAt) return;\n    \n    const updateTimer = () => {\n      const now = new Date();\n      const next = new Date(spinStatus.nextPlayAt!);\n      const diff = next.getTime() - now.getTime();\n      \n      if (diff <= 0) {\n        setSpinTimeLeft(\"Ready to play!\");\n        queryClient.invalidateQueries({ queryKey: [\"/api/games/daily-spin/status\"] });\n        return;\n      }\n      \n      const hours = Math.floor(diff / (1000 * 60 * 60));\n      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n      \n      setSpinTimeLeft(`${hours}h ${minutes}m ${seconds}s`);\n    };\n    \n    updateTimer();\n    const interval = setInterval(updateTimer, 1000);\n    \n    return () => clearInterval(interval);\n  }, [spinStatus]);\n\n  useEffect(() => {\n    if (!drawStatus?.nextPlayAt) return;\n    \n    const updateTimer = () => {\n      const now = new Date();\n      const next = new Date(drawStatus.nextPlayAt!);\n      const diff = next.getTime() - now.getTime();\n      \n      if (diff <= 0) {\n        setDrawTimeLeft(\"Ready to play!\");\n        queryClient.invalidateQueries({ queryKey: [\"/api/games/lucky-draw/status\"] });\n        return;\n      }\n      \n      const hours = Math.floor(diff / (1000 * 60 * 60));\n      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n      \n      setDrawTimeLeft(`${hours}h ${minutes}m ${seconds}s`);\n    };\n    \n    updateTimer();\n    const interval = setInterval(updateTimer, 1000);\n    \n    return () => clearInterval(interval);\n  }, [drawStatus]);\n\n  useEffect(() => {\n    if (!matchStatus?.nextPlayAt) return;\n    \n    const updateTimer = () => {\n      const now = new Date();\n      const next = new Date(matchStatus.nextPlayAt!);\n      const diff = next.getTime() - now.getTime();\n      \n      if (diff <= 0) {\n        setMatchTimeLeft(\"Ready to play!\");\n        queryClient.invalidateQueries({ queryKey: [\"/api/games/miner-match/status\"] });\n        return;\n      }\n      \n      const hours = Math.floor(diff / (1000 * 60 * 60));\n      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n      \n      setMatchTimeLeft(`${hours}h ${minutes}m ${seconds}s`);\n    };\n    \n    updateTimer();\n    const interval = setInterval(updateTimer, 1000);\n    \n    return () => clearInterval(interval);\n  }, [matchStatus]);\n\n  if (spinLoading || drawLoading || matchLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-primary\" data-testid=\"loader-games\" />\n      </div>\n    );\n  }\n\n  return (\n    <>\n    <div className=\"container max-w-4xl mx-auto p-4 space-y-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-4xl font-bold text-primary flex items-center justify-center gap-2\" data-testid=\"text-games-title\">\n          <Trophy className=\"w-10 h-10\" />\n          Mini Games\n        </h1>\n        <p className=\"text-muted-foreground\" data-testid=\"text-games-description\">\n          Play daily mini-games to earn bonus MERE tokens\n        </p>\n      </div>\n\n      {/* Daily Spin Game */}\n      <Card className=\"border-primary/20\" data-testid=\"card-daily-spin\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-2xl\">\n            <Sparkles className=\"w-6 h-6 text-primary\" />\n            Daily Spin\n          </CardTitle>\n          <CardDescription>\n            Spin the wheel once per day to win MERE tokens\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex justify-center\">\n            <div \n              className={`relative w-48 h-48 rounded-full border-8 border-primary/30 bg-gradient-to-br from-primary/10 to-background flex items-center justify-center ${\n                spinning ? 'animate-spin' : ''\n              }`}\n              data-testid=\"spinner-wheel\"\n            >\n              <div className=\"absolute inset-0 rounded-full border-8 border-transparent border-t-primary\"></div>\n              <div className=\"relative z-10\">\n                {showSpinReward && spinRewardAmount ? (\n                  <div className=\"text-center animate-bounce\" data-testid=\"text-spin-reward\">\n                    <Gift className=\"w-16 h-16 mx-auto text-primary mb-2\" />\n                    <p className=\"text-3xl font-bold text-primary\">{spinRewardAmount}</p>\n                    <p className=\"text-sm text-muted-foreground\">MERE</p>\n                  </div>\n                ) : (\n                  <Sparkles className=\"w-16 h-16 text-primary\" />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"text-center space-y-4\">\n            {spinStatus?.canPlay ? (\n              <div className=\"space-y-2\">\n                <p className=\"text-green-500 font-semibold\" data-testid=\"text-spin-ready\">\n                  ✨ Ready to spin!\n                </p>\n                <Button\n                  onClick={handleSpin}\n                  disabled={spinning || spinMutation.isPending}\n                  size=\"lg\"\n                  className=\"w-full max-w-xs\"\n                  data-testid=\"button-play-spin\"\n                >\n                  {spinning || spinMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Spinning...\n                    </>\n                  ) : (\n                    <>\n                      <Sparkles className=\"w-4 h-4 mr-2\" />\n                      Spin Now!\n                    </>\n                  )}\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <p className=\"text-muted-foreground font-semibold\" data-testid=\"text-spin-played\">\n                  You've already spun today!\n                </p>\n                {spinStatus?.lastReward && (\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-spin-last-reward\">\n                    Last reward: <span className=\"text-primary font-semibold\">{spinStatus.lastReward} MERE</span>\n                  </p>\n                )}\n                <div className=\"mt-4 p-4 rounded-lg bg-card/50 border border-primary/20\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">Next spin in:</p>\n                  <p className=\"text-2xl font-bold text-primary font-mono\" data-testid=\"text-spin-countdown\">\n                    {spinTimeLeft}\n                  </p>\n                </div>\n                <Button\n                  disabled\n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"w-full max-w-xs\"\n                  data-testid=\"button-play-spin-disabled\"\n                >\n                  Come Back Tomorrow\n                </Button>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Lucky Draw Game */}\n      <Card className=\"border-primary/20\" data-testid=\"card-lucky-draw\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-2xl\">\n            <Gem className=\"w-6 h-6 text-primary\" />\n            Lucky Draw\n          </CardTitle>\n          <CardDescription>\n            Draw a gem once per day for rarity-based MERE rewards\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex justify-center\">\n            <div \n              className={`relative w-48 h-48 rounded-lg border-4 border-primary/30 bg-gradient-to-br from-background to-card flex items-center justify-center ${\n                drawing ? 'animate-pulse' : ''\n              }`}\n              data-testid=\"draw-gem-container\"\n            >\n              {showDrawReward && drawRewardAmount && drawRarity ? (\n                <div className=\"text-center\" data-testid=\"text-draw-reward\">\n                  <div className={`w-24 h-24 mx-auto mb-4 rounded-full bg-gradient-to-br ${rarityColors[drawRarity as keyof typeof rarityColors]} animate-pulse flex items-center justify-center`}>\n                    <Gem className=\"w-16 h-16 text-white\" />\n                  </div>\n                  <p className={`text-xl font-bold mb-1 ${rarityText[drawRarity as keyof typeof rarityText]}`}>\n                    {drawRarity.charAt(0).toUpperCase() + drawRarity.slice(1)} Gem\n                  </p>\n                  <p className=\"text-3xl font-bold text-primary\">{drawRewardAmount}</p>\n                  <p className=\"text-sm text-muted-foreground\">MERE</p>\n                </div>\n              ) : (\n                <div className=\"w-24 h-24 rounded-full bg-gradient-to-br from-gray-400 to-gray-600 flex items-center justify-center\">\n                  <Gem className=\"w-16 h-16 text-white\" />\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"text-center space-y-4\">\n            {drawStatus?.canPlay ? (\n              <div className=\"space-y-2\">\n                {drawStatus.isFirstPlay && (\n                  <p className=\"text-xs text-muted-foreground\" data-testid=\"text-draw-first\">\n                    🎁 First draw guaranteed!\n                  </p>\n                )}\n                <p className=\"text-green-500 font-semibold\" data-testid=\"text-draw-ready\">\n                  ✨ Ready to draw!\n                </p>\n                <Button\n                  onClick={handleDraw}\n                  disabled={drawing || drawMutation.isPending}\n                  size=\"lg\"\n                  className=\"w-full max-w-xs\"\n                  data-testid=\"button-play-draw\"\n                >\n                  {drawing || drawMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Drawing...\n                    </>\n                  ) : (\n                    <>\n                      <Gem className=\"w-4 h-4 mr-2\" />\n                      Draw Now!\n                    </>\n                  )}\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <p className=\"text-muted-foreground font-semibold\" data-testid=\"text-draw-played\">\n                  You've already drawn today!\n                </p>\n                {drawStatus?.lastReward && drawStatus?.lastRarity && (\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-draw-last-reward\">\n                    Last draw: <span className={`font-semibold ${rarityText[drawStatus.lastRarity as keyof typeof rarityText]}`}>\n                      {drawStatus.lastRarity.charAt(0).toUpperCase() + drawStatus.lastRarity.slice(1)}\n                    </span> - <span className=\"text-primary font-semibold\">{drawStatus.lastReward} MERE</span>\n                  </p>\n                )}\n                <div className=\"mt-4 p-4 rounded-lg bg-card/50 border border-primary/20\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">Next draw in:</p>\n                  <p className=\"text-2xl font-bold text-primary font-mono\" data-testid=\"text-draw-countdown\">\n                    {drawTimeLeft}\n                  </p>\n                </div>\n                <Button\n                  disabled\n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"w-full max-w-xs\"\n                  data-testid=\"button-play-draw-disabled\"\n                >\n                  Come Back Tomorrow\n                </Button>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Miner Match Game */}\n      <Card className=\"border-primary/20\" data-testid=\"card-miner-match\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-2xl\">\n            <Grid3x3 className=\"w-6 h-6 text-primary\" />\n            Miner Match\n          </CardTitle>\n          <CardDescription>\n            Match pairs of miners to earn MERE\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {matchGameActive ? (\n            <>\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Moves: <span className=\"text-primary font-bold\">{matchMoves}</span>\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Pairs: <span className=\"text-primary font-bold\">{matchedPairs}/6</span>\n                </p>\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-3 max-w-sm mx-auto\" data-testid=\"match-grid\">\n                {matchCards.map((card) => (\n                  <button\n                    key={card.id}\n                    onClick={() => handleCardClick(card.id)}\n                    disabled={card.matched || card.flipped}\n                    className={`aspect-square rounded-lg border-2 transition-all ${\n                      card.matched\n                        ? 'bg-primary/20 border-primary cursor-not-allowed'\n                        : card.flipped\n                        ? 'bg-primary/30 border-primary'\n                        : 'bg-card border-primary/20 hover-elevate active-elevate-2'\n                    }`}\n                    data-testid={`match-card-${card.id}`}\n                  >\n                    <div className=\"flex items-center justify-center h-full\">\n                      {(card.flipped || card.matched) ? (\n                        <span className=\"text-lg font-bold text-primary\">{card.minerType}</span>\n                      ) : (\n                        <Grid3x3 className=\"w-6 h-6 text-muted-foreground\" />\n                      )}\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center space-y-4\">\n              {matchStatus?.canPlay ? (\n                <div className=\"space-y-2\">\n                  <p className=\"text-green-500 font-semibold\" data-testid=\"text-match-ready\">\n                    ✨ Ready to play!\n                  </p>\n                  <Button\n                    onClick={initMatchGame}\n                    size=\"lg\"\n                    className=\"w-full max-w-xs\"\n                    data-testid=\"button-play-match\"\n                  >\n                    <Grid3x3 className=\"w-4 h-4 mr-2\" />\n                    Start Game\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  <p className=\"text-muted-foreground font-semibold\" data-testid=\"text-match-played\">\n                    You've already played today!\n                  </p>\n                  {matchStatus?.lastReward && (\n                    <p className=\"text-sm text-muted-foreground\" data-testid=\"text-match-last-reward\">\n                      Last reward: <span className=\"text-primary font-semibold\">{matchStatus.lastReward} MERE</span>\n                    </p>\n                  )}\n                  <div className=\"mt-4 p-4 rounded-lg bg-card/50 border border-primary/20\">\n                    <p className=\"text-sm text-muted-foreground mb-1\">Next game in:</p>\n                    <p className=\"text-2xl font-bold text-primary font-mono\" data-testid=\"text-match-countdown\">\n                      {matchTimeLeft}\n                    </p>\n                  </div>\n                  <Button\n                    disabled\n                    size=\"lg\"\n                    variant=\"outline\"\n                    className=\"w-full max-w-xs\"\n                    data-testid=\"button-play-match-disabled\"\n                  >\n                    Come Back Tomorrow\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <div className=\"h-20\"></div>\n    </div>\n    <BottomNav />\n  </>\n  );\n}\n","size_bytes":23768}},"version":2}